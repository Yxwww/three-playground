#!/usr/bin/env node

import puppeteer from 'puppeteer';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { categories } from '../src/lib/categories.js';

// Get the directory name of the current module
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const thumbnailsDir = path.resolve(__dirname, '../static/thumbnails');
const categoriesFile = path.resolve(__dirname, '../src/lib/categories.js');

// Ensure thumbnails directory exists
if (!fs.existsSync(thumbnailsDir)) {
	fs.mkdirSync(thumbnailsDir, { recursive: true });
}

async function generateThumbnails() {
	// Launch a headless browser
	const browser = await puppeteer.launch({
		headless: 'new',
		defaultViewport: {
			width: 800,
			height: 600
		},
		// Use system Chrome instead of downloading Chrome
		executablePath:
			process.platform === 'darwin'
				? '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
				: process.platform === 'win32'
					? 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'
					: '/usr/bin/google-chrome'
	});

	// Get all routes from categories
	const routes = [];
	categories.forEach((category) => {
		category.routes.forEach((route) => {
			routes.push(route.path);
		});
	});

	console.log(`Found ${routes.length} routes to capture`);

	try {
		// Open a new page
		const page = await browser.newPage();

		// For each route, take a screenshot
		for (const route of routes) {
			const url = `http://localhost:3004/${route}`;
			console.log(`Capturing ${url}`);

			// Navigate to the page
			try {
				await page.goto(url, { waitUntil: 'networkidle2', timeout: 30000 });

				// Wait for the scene to render (3D components might need time)
				await new Promise((resolve) => setTimeout(resolve, 2000));

				// Find the canvas element
				const canvasElement = await page.$('canvas');

				if (!canvasElement) {
					console.error(`  No canvas element found on ${url}`);
					continue;
				}

				// Get the bounding box of the canvas
				const boundingBox = await canvasElement.boundingBox();

				// Take screenshot of only the canvas
				const screenshotPath = path.join(thumbnailsDir, `${route.replace(/\//g, '-')}.jpg`);
				await canvasElement.screenshot({
					path: screenshotPath,
					type: 'jpeg',
					quality: 80
				});

				console.log(`  Saved canvas thumbnail to ${screenshotPath}`);
			} catch (error) {
				console.error(`  Error capturing ${url}:`, error.message);
			}
		}
	} finally {
		await browser.close();
	}

	// Update categories with thumbnail info
	updateCategoriesWithThumbnails();
}

function updateCategoriesWithThumbnails() {
	// Read existing categories
	const categoriesData = [...categories];

	// Add thumbnail path to each route
	categoriesData.forEach((category) => {
		category.routes.forEach((route) => {
			route.thumbnail = `/thumbnails/${route.path.replace(/\//g, '-')}.jpg`;
		});
	});

	// Write updated categories back to file
	const fileContent = `// Auto-generated by scripts/generate-categories.js
// DO NOT EDIT THIS FILE DIRECTLY

export const categories = ${JSON.stringify(categoriesData, null, 2)};
`;

	fs.writeFileSync(categoriesFile, fileContent);
	console.log(`Updated categories with thumbnail paths in ${categoriesFile}`);
}

// Print usage information
console.log('Thumbnail Generator for Three.js Playground');
console.log('-------------------------------------------');
console.log('This script will:');
console.log('1. Navigate to each route in the project');
console.log('2. Take a screenshot of each page');
console.log('3. Save the screenshots to /static/thumbnails/');
console.log('4. Update the categories data with thumbnail paths');
console.log('');
console.log(
	'IMPORTANT: Make sure your development server is running on port 3003 before running this script.'
);
console.log('Start your dev server with: pnpm run dev');
console.log('');
console.log('Press Ctrl+C to cancel or wait 5 seconds to begin...');

// Wait 5 seconds before starting
setTimeout(generateThumbnails, 5000);
