{"version":3,"sources":["node_modules/assertion-error/index.js","node_modules/pathval/index.js","node_modules/chai/lib/chai/utils/flag.js","node_modules/chai/lib/chai/utils/test.js","node_modules/type-detect/type-detect.js","node_modules/chai/lib/chai/utils/expectTypes.js","node_modules/chai/lib/chai/utils/getActual.js","node_modules/get-func-name/index.js","node_modules/chai/lib/chai/utils/getProperties.js","node_modules/chai/lib/chai/utils/getEnumerableProperties.js","node_modules/chai/lib/chai/config.js","node_modules/chai/lib/chai/utils/inspect.js","node_modules/chai/lib/chai/utils/objDisplay.js","node_modules/chai/lib/chai/utils/getMessage.js","node_modules/chai/lib/chai/utils/transferFlags.js","node_modules/deep-eql/index.js","node_modules/chai/lib/chai/utils/isProxyEnabled.js","node_modules/chai/lib/chai/utils/addProperty.js","node_modules/chai/lib/chai/utils/addLengthGuard.js","node_modules/chai/lib/chai/utils/proxify.js","node_modules/chai/lib/chai/utils/addMethod.js","node_modules/chai/lib/chai/utils/overwriteProperty.js","node_modules/chai/lib/chai/utils/overwriteMethod.js","node_modules/chai/lib/chai/utils/addChainableMethod.js","node_modules/chai/lib/chai/utils/overwriteChainableMethod.js","node_modules/chai/lib/chai/utils/compareByInspect.js","node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js","node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js","node_modules/check-error/index.js","node_modules/chai/lib/chai/utils/isNaN.js","node_modules/chai/lib/chai/utils/index.js","node_modules/chai/lib/chai/assertion.js","node_modules/chai/lib/chai/core/assertions.js","node_modules/chai/lib/chai/interface/expect.js","node_modules/chai/lib/chai/interface/should.js","node_modules/chai/lib/chai/interface/assert.js","node_modules/chai/lib/chai.js","node_modules/chai/index.js","node_modules/voronoi/rhill-voronoi-core.js","node_modules/@turf/helpers/index.js","node_modules/@turf/meta/index.js","node_modules/@turf/centroid/index.js","node_modules/turf-point/index.js","node_modules/@turf/invariant/index.js","node_modules/@turf/bearing/index.js","node_modules/@turf/distance/index.js","node_modules/@turf/destination/index.js","node_modules/@turf/line-segment/index.js","node_modules/quickselect/quickselect.js","node_modules/rbush/index.js","node_modules/@turf/bbox/index.js","node_modules/geojson-rbush/index.js","node_modules/@turf/line-intersect/index.js","node_modules/@turf/nearest-point-on-line/index.js","node_modules/@turf/boolean-point-in-polygon/node_modules/@turf/helpers/main.es.js","node_modules/@turf/boolean-point-in-polygon/node_modules/@turf/invariant/main.es.js","node_modules/@turf/boolean-point-in-polygon/main.es.js","node_modules/@turf/points-within-polygon/node_modules/@turf/helpers/main.es.js","node_modules/@turf/points-within-polygon/node_modules/@turf/meta/main.es.js","node_modules/@turf/points-within-polygon/main.es.js","errors.js","node_modules/@turf/area/index.js","utils/geojson-utils.js","max-inscribed-circle.js"],"names":["module","exports","obj","key","value","flags","__flags","Object","create","arguments","length","flag","require","args","negate","expr","global","factory","define","amd","typeDetect","promiseExists","Promise","globalObject","self","symbolExists","Symbol","mapExists","Map","setExists","Set","weakMapExists","WeakMap","weakSetExists","WeakSet","dataViewExists","DataView","symbolIteratorExists","iterator","symbolToStringTagExists","toStringTag","setEntriesExists","prototype","entries","mapEntriesExists","setIteratorPrototype","getPrototypeOf","mapIteratorPrototype","arrayIteratorExists","Array","arrayIteratorPrototype","stringIteratorExists","String","stringIteratorPrototype","toStringLeftSliceLength","toStringRightSliceLength","typeofObj","isArray","window","location","document","navigator","mimeTypes","plugins","HTMLElement","tagName","stringTag","objPrototype","RegExp","Date","toString","call","slice","AssertionError","type","types","flagMsg","ssfi","map","t","toLowerCase","sort","str","index","art","indexOf","charAt","or","join","objType","some","expected","undefined","_obj","object","result","getOwnPropertyNames","addProperty","property","push","proto","forEach","name","includeStack","showDiff","truncateThreshold","useProxy","proxyExcludedKeys","getName","getProperties","getEnumerableProperties","config","inspect","showHidden","depth","colors","formatValue","seen","stylize","isDOMElement","nodeType","nodeName","ctx","recurseTimes","constructor","ret","primitive","formatPrimitive","outerHTML","xmlVersion","xmlSerializer","XMLSerializer","serializeToString","ns","container","createElementNS","appendChild","cloneNode","html","innerHTML","replace","err","visibleKeys","nameSuffix","keys","isError","isRegExp","isDate","toUTCString","formatError","base","output","array","typedArray","braces","isTypedArray","formatArray","formatTypedArray","formatProperty","reduceToSingleString","pop","simple","JSON","stringify","Infinity","Error","i","l","hasOwnProperty","match","propDescriptor","getOwnPropertyDescriptor","get","set","split","line","substr","reduce","prev","cur","ar","test","objectToString","re","d","e","o","splice","getActual","objDisplay","val","actual","msg","assertion","includeAll","FakeMap","_key","Math","random","now","isExtensible","defineProperty","configurable","MemoizeMap","memoizeCompare","leftHandOperand","rightHandOperand","memoizeMap","isPrimitive","leftHandMap","memoizeSet","deepEqual","options","comparator","extensiveDeepEqual","simpleResult","simpleEqual","memoize","memoizeResultLeft","memoizeResultRight","comparatorResult","leftHandType","extensiveDeepEqualByType","valueOf","iterableEqual","regexpEqual","generatorEqual","Uint8Array","buffer","entriesEqual","objectEqual","size","leftHandItems","rightHandItems","getGeneratorEntries","hasIteratorFunction","target","getIteratorEntries","iteratorError","generator","generatorResult","next","accumulator","done","getEnumerableKeys","keysEqual","leftHandKeys","rightHandKeys","leftHandEntries","rightHandEntries","Proxy","Reflect","chai","isProxyEnabled","transferFlags","getter","propertyGetter","newAssertion","Assertion","fnLengthDesc","fn","assertionName","isChainable","builtins","stringDistanceCapped","strA","strB","cap","abs","memo","fill","j","ch","charCodeAt","min","nonChainableMethodName","proxyGetter","has","suggestion","suggestionDistance","prop","dist","addLengthGuard","proxify","method","methodWrapper","apply","_get","_super","overwritingPropertyGetter","origLockSsfi","_method","overwritingMethodWrapper","canSetPrototype","setPrototypeOf","testFn","excludeNames","filter","propDesc","Function","chainingBehavior","chainableBehavior","__methods","chainableMethodWrapper","asserterName","pd","_chainingBehavior","a","b","getOwnPropertySymbols","sym","enumerable","getOwnEnumerablePropertySymbols","concat","isNaN","Number","pathval","expectTypes","getMessage","eql","getPathInfo","hasProperty","addMethod","overwriteProperty","overwriteMethod","addChainableMethod","overwriteChainableMethod","compareByInspect","getOwnEnumerableProperties","checkError","_chai","util","lockSsfi","console","warn","assert","negateMsg","_actual","ok","_","an","article","SameValueZero","includeChainingBehavior","include","isDeep","descriptor","included","isEql","item","props","firstErr","numErrs","propAssertion","compatibleConstructor","checkArguments","assertEqual","prevLockSsfi","assertEql","assertAbove","n","errorMessage","doLength","msgPrefix","nType","shouldThrow","to","have","itemsCount","assertLeast","assertBelow","assertMost","assertInstanceOf","isInstanceOf","TypeError","assertProperty","isNested","isOwn","nameType","pathInfo","exists","assertOwnProperty","assertOwnPropertyDescriptor","actualDescriptor","assertLengthChain","assertLength","assertMatch","exec","assertKeys","keysType","deepStr","mixedArgsMsg","len","any","all","expectedKey","actualKey","every","last","assertThrows","errorLike","errMsgMatcher","caughtErr","is","everyArgIsUndefined","everyArgIsDefined","Boolean","errorLikeFail","errMsgMatcherFail","errorLikeString","getConstructorName","compatibleInstance","placeholder","compatibleMessage","respondTo","itself","context","satisfy","matcher","closeTo","delta","assertChanges","subject","initial","final","msgObj","assertIncreases","assertDecreases","chain","trim","start","finish","startType","finishType","range","subset","be","contains","failMsg","failNegateMsg","ordered","cmp","isSubsetOf","superset","elem","idx","matchIdx","elem2","oneOf","list","assertDelta","expression","behavior","realDelta","isSealed","isFrozen","isFinite","expect","message","fail","operator","loadShould","shouldSetter","writable","shouldGetter","should","val1","val2","equal","errt","errs","Throw","exist","not","Should","express","errmsg","isOk","isNotOk","act","exp","notEqual","strictEqual","notStrictEqual","deepStrictEqual","notDeepEqual","isAbove","abv","above","isAtLeast","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","NaN","isNotNaN","notExists","isUndefined","isDefined","isFunction","isNotFunction","isObject","isNotObject","isNotArray","isString","isNotString","isNumber","isNotNumber","finite","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","deepInclude","deep","notDeepInclude","nestedInclude","nested","notNestedInclude","deepNestedInclude","notDeepNestedInclude","ownInclude","own","notOwnInclude","deepOwnInclude","notDeepOwnInclude","notMatch","notProperty","propertyVal","notPropertyVal","deepPropertyVal","notDeepPropertyVal","ownProperty","notOwnProperty","ownPropertyVal","notOwnPropertyVal","deepOwnPropertyVal","notDeepOwnPropertyVal","nestedProperty","notNestedProperty","nestedPropertyVal","notNestedPropertyVal","deepNestedPropertyVal","notDeepNestedPropertyVal","lengthOf","hasAnyKeys","hasAllKeys","containsAllKeys","contain","doesNotHaveAnyKeys","doesNotHaveAllKeys","hasAnyDeepKeys","hasAllDeepKeys","containsAllDeepKeys","doesNotHaveAnyDeepKeys","doesNotHaveAllDeepKeys","throws","assertErr","throw","doesNotThrow","approximately","sameMembers","set1","set2","same","members","notSameMembers","sameDeepMembers","notSameDeepMembers","sameOrderedMembers","notSameOrderedMembers","sameDeepOrderedMembers","notSameDeepOrderedMembers","includeMembers","notIncludeMembers","includeDeepMembers","notIncludeDeepMembers","includeOrderedMembers","notIncludeOrderedMembers","includeDeepOrderedMembers","notIncludeDeepOrderedMembers","inList","changes","change","changesBy","tmpMsg","by","doesNotChange","changesButNotBy","but","increases","increase","increasesBy","doesNotIncrease","increasesButNotBy","decreases","decrease","decreasesBy","doesNotDecrease","doesNotDecreaseBy","decreasesButNotBy","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","isEmpty","empty","isNotEmpty","alias","as","used","version","use","core","earthRadius","factors","meters","metres","millimeters","millimetres","centimeters","centimetres","kilometers","kilometres","miles","nauticalmiles","inches","yards","feet","radians","degrees","unitsFactors","areaFactors","acres","feature","geometry","properties","bbox","id","validateBBox","validateId","feat","coordinates","geom","point","lineString","polygon","multiPoint","multiLineString","multiPolygon","points","featureCollection","coords","ring","polygons","lineStrings","features","fc","geometryCollection","geometries","round","num","precision","multiplier","pow","radiansToLength","units","factor","lengthToRadians","distance","lengthToDegrees","radiansToDegrees","bearingToAzimuth","bearing","angle","PI","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","area","startFactor","finalFactor","input","radians2degrees","degrees2radians","distanceToDegrees","distanceToRadians","radiansToDistance","bearingToAngle","convertDistance","getCoord","coord","getCoords","containsNumber","geojsonType","featureOf","collectionOf","getGeom","geojson","getGeomType","getType","booleanPointInPolygon","ignoreBoundary","pt","polys","inBBox","insidePoly","inRing","k","inHole","isInside","xi","yi","xj","yj","onBoundary","coordEach","callback","excludeWrapCoord","stopG","geometryMaybeCollection","isGeometryCollection","wrapShrink","coordIndex","isFeatureCollection","isFeature","stop","featureIndex","geomIndex","multiFeatureIndex","geometryIndex","geomType","coordReduce","initialValue","previousValue","currentCoord","propEach","propReduce","currentProperties","featureEach","featureReduce","currentFeature","coordAll","geomEach","g","featureProperties","featureBBox","featureId","geomReduce","currentGeometry","flattenEach","coordinate","flattenReduce","segmentEach","feature$$1","segmentIndex","previousCoords","featureIndexCoord","mutliPartIndexCoord","currentSegment","segmentReduce","started","lineEach","lineReduce","currentLine","findSegment","findPoint","pointsWithinPolygon","results","NoPointsInShapeError","vertices","GeoJSONUtils","_toGeoJSONFeature","_toGeoJSONPolygon","collectionArea","max","numSegments","xmin","xmax","ymin","ymax","decimalPlaces","polygonSites","polyRing","x","floor","y","sites","xl","xr","yt","yb","maxInscribedCircle","voronoi","Voronoi","assign","inputProperties","fixMultiPoly","polySites","diagram","compute","polygonFeatureCollection","ptsWithin","labelLocation","vertexDistance","maxDist","polygonBoundaries","radius"],"mappings":"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","file":"max-inscribed-circle.js","sourceRoot":"..","sourcesContent":["/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || AssertionError;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n","'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === (pathDepth - 1)) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === (pathDepth - 1)) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.typeDetect = factory());\n}(this, (function () { 'use strict';\n\n/* !\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar promiseExists = typeof Promise === 'function';\n\n/* eslint-disable no-undef */\nvar globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist\n\nvar symbolExists = typeof Symbol !== 'undefined';\nvar mapExists = typeof Map !== 'undefined';\nvar setExists = typeof Set !== 'undefined';\nvar weakMapExists = typeof WeakMap !== 'undefined';\nvar weakSetExists = typeof WeakSet !== 'undefined';\nvar dataViewExists = typeof DataView !== 'undefined';\nvar symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\nvar symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\nvar setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\nvar mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\nvar setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\nvar mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\nvar arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\nvar stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\nvar stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\nvar toStringLeftSliceLength = 8;\nvar toStringRightSliceLength = -1;\n/**\n * ### typeOf (obj)\n *\n * Uses `Object.prototype.toString` to determine the type of an object,\n * normalising behaviour across engine versions & well optimised.\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nfunction typeDetect(obj) {\n  /* ! Speed optimisation\n   * Pre:\n   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)\n   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)\n   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)\n   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)\n   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)\n   * Post:\n   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)\n   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)\n   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)\n   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)\n   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)\n   */\n  var typeofObj = typeof obj;\n  if (typeofObj !== 'object') {\n    return typeofObj;\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)\n   * Post:\n   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)\n   */\n  if (obj === null) {\n    return 'null';\n  }\n\n  /* ! Spec Conformance\n   * Test: `Object.prototype.toString.call(window)``\n   *  - Node === \"[object global]\"\n   *  - Chrome === \"[object global]\"\n   *  - Firefox === \"[object Window]\"\n   *  - PhantomJS === \"[object Window]\"\n   *  - Safari === \"[object Window]\"\n   *  - IE 11 === \"[object Window]\"\n   *  - IE Edge === \"[object Window]\"\n   * Test: `Object.prototype.toString.call(this)``\n   *  - Chrome Worker === \"[object global]\"\n   *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n   *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n   */\n  if (obj === globalObject) {\n    return 'global';\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)\n   * Post:\n   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)\n   */\n  if (\n    Array.isArray(obj) &&\n    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))\n  ) {\n    return 'Array';\n  }\n\n  // Not caching existence of `window` and related properties due to potential\n  // for `window` to be unset before tests in quasi-browser environments.\n  if (typeof window === 'object' && window !== null) {\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n     * WhatWG HTML$7.7.3 - The `Location` interface\n     * Test: `Object.prototype.toString.call(window.location)``\n     *  - IE <=11 === \"[object Object]\"\n     *  - IE Edge <=13 === \"[object Object]\"\n     */\n    if (typeof window.location === 'object' && obj === window.location) {\n      return 'Location';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#document)\n     * WhatWG HTML$3.1.1 - The `Document` object\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     *       WhatWG HTML states:\n     *         > For historical reasons, Window objects must also have a\n     *         > writable, configurable, non-enumerable property named\n     *         > HTMLDocument whose value is the Document interface object.\n     * Test: `Object.prototype.toString.call(document)``\n     *  - Chrome === \"[object HTMLDocument]\"\n     *  - Firefox === \"[object HTMLDocument]\"\n     *  - Safari === \"[object HTMLDocument]\"\n     *  - IE <=10 === \"[object Document]\"\n     *  - IE 11 === \"[object HTMLDocument]\"\n     *  - IE Edge <=13 === \"[object HTMLDocument]\"\n     */\n    if (typeof window.document === 'object' && obj === window.document) {\n      return 'Document';\n    }\n\n    if (typeof window.navigator === 'object') {\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n       *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n       */\n      if (typeof window.navigator.mimeTypes === 'object' &&\n          obj === window.navigator.mimeTypes) {\n        return 'MimeTypeArray';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n       * Test: `Object.prototype.toString.call(navigator.plugins)``\n       *  - IE <=10 === \"[object MSPluginsCollection]\"\n       */\n      if (typeof window.navigator.plugins === 'object' &&\n          obj === window.navigator.plugins) {\n        return 'PluginArray';\n      }\n    }\n\n    if ((typeof window.HTMLElement === 'function' ||\n        typeof window.HTMLElement === 'object') &&\n        obj instanceof window.HTMLElement) {\n      /* ! Spec Conformance\n      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n      *  - IE <=10 === \"[object HTMLBlockElement]\"\n      */\n      if (obj.tagName === 'BLOCKQUOTE') {\n        return 'HTMLQuoteElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('td'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TD') {\n        return 'HTMLTableDataCellElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('th'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TH') {\n        return 'HTMLTableHeaderCellElement';\n      }\n    }\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)\n  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)\n  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)\n  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)\n  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)\n  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)\n  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)\n  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)\n  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)\n  * Post:\n  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)\n  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)\n  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)\n  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)\n  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)\n  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)\n  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)\n  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)\n  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)\n  */\n  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n\n  var objPrototype = Object.getPrototypeOf(obj);\n  /* ! Speed optimisation\n  * Pre:\n  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)\n  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)\n  * Post:\n  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)\n  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)\n  */\n  if (objPrototype === RegExp.prototype) {\n    return 'RegExp';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)\n  * Post:\n  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)\n  */\n  if (objPrototype === Date.prototype) {\n    return 'Date';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n   * Test: `Object.prototype.toString.call(Promise.resolve())``\n   *  - Chrome <=47 === \"[object Object]\"\n   *  - Edge <=20 === \"[object Object]\"\n   *  - Firefox 29-Latest === \"[object Promise]\"\n   *  - Safari 7.1-Latest === \"[object Promise]\"\n   */\n  if (promiseExists && objPrototype === Promise.prototype) {\n    return 'Promise';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)\n  * Post:\n  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)\n  */\n  if (setExists && objPrototype === Set.prototype) {\n    return 'Set';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)\n  * Post:\n  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)\n  */\n  if (mapExists && objPrototype === Map.prototype) {\n    return 'Map';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)\n  * Post:\n  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)\n  */\n  if (weakSetExists && objPrototype === WeakSet.prototype) {\n    return 'WeakSet';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)\n  * Post:\n  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)\n  */\n  if (weakMapExists && objPrototype === WeakMap.prototype) {\n    return 'WeakMap';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (dataViewExists && objPrototype === DataView.prototype) {\n    return 'DataView';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n   * Test: `Object.prototype.toString.call(new Map().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (mapExists && objPrototype === mapIteratorPrototype) {\n    return 'Map Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n   * Test: `Object.prototype.toString.call(new Set().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (setExists && objPrototype === setIteratorPrototype) {\n    return 'Set Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n    return 'Array Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n    return 'String Iterator';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)\n  * Post:\n  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)\n  */\n  if (objPrototype === null) {\n    return 'Object';\n  }\n\n  return Object\n    .prototype\n    .toString\n    .call(obj)\n    .slice(toStringLeftSliceLength, toStringRightSliceLength);\n}\n\nreturn typeDetect;\n\n})));\n","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n","'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']\n};\n","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      'nodeType' in object &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          var html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  var name, nameSuffix;\n\n  // Some type of object without properties can be shortcut.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      name = getName(value);\n      nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = ''\n    , array = false\n    , typedArray = false\n    , braces = ['{', '}'];\n\n  if (isTypedArray(value)) {\n    typedArray = true;\n    braces = ['[', ']'];\n  }\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    name = getName(value);\n    nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else if (typedArray) {\n    return formatTypedArray(value);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n\n    case 'symbol':\n      return ctx.stylize(value.toString(), 'symbol');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatTypedArray(value) {\n  var str = '[ ';\n\n  for (var i = 0; i < value.length; ++i) {\n    if (str.length >= config.truncateThreshold - 7) {\n      str += '...';\n      break;\n    }\n    str += value[i] + ', ';\n  }\n  str += ' ]';\n\n  // Removing trailing `, ` if the array was not truncated\n  if (str.indexOf(',  ]') !== -1) {\n    str = str.replace(',  ]', ' ]');\n  }\n\n  return str;\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name;\n  var propDescriptor = Object.getOwnPropertyDescriptor(value, key);\n  var str;\n\n  if (propDescriptor) {\n    if (propDescriptor.get) {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var length = output.reduce(function(prev, cur) {\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isTypedArray(ar) {\n  // Unfortunately there's no way to check if an object is a TypedArray\n  // We have to check if it's one of these types\n  return (typeof ar === 'object' && /\\w+Array]$/.test(objectToString(ar)));\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n","'use strict';\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function getMap(key) {\n    return key[this._key];\n  },\n  set: function setMap(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Error':\n      return leftHandOperand === rightHandOperand;\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n  if (leftHandOperand.size !== rightHandOperand.size) {\n    return false;\n  }\n  if (leftHandOperand.size === 0) {\n    return true;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    leftHandKeys.sort();\n    rightHandKeys.sort();\n    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n","var config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n","var config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n","/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n","/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n","/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n","'use strict';\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getFunctionName(constructorFn)\n *\n * Returns the name of a function.\n * This also includes a polyfill function if `constructorFn.name` is not defined.\n *\n * @name getFunctionName\n * @param {Function} constructorFn\n * @namespace Utils\n * @api private\n */\n\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\(\\/]+)/;\nfunction getFunctionName(constructorFn) {\n  var name = '';\n  if (typeof constructorFn.name === 'undefined') {\n    // Here we run a polyfill if constructorFn.name is not defined\n    var match = String(constructorFn).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    name = constructorFn.name;\n  }\n\n  return name;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike).trim() ||\n        getFunctionName(new errorLike()); // eslint-disable-line new-cap\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n","/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still' ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : '';\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        var isEql = isDeep ? _.eql : SameValueZero;\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || _.eql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return _.eql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'object tested must be an array, a map, an object,'\n              + ' a set, a string, or a weakset, but ' + objType + ' given',\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * @name exist\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('exist', function () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that its not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The alias `.gte` can be used interchangeably with `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The alias `.lte` can be used interchangeably with `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toUTCString() + '..' + finish.toUTCString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name];\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && (isDeep ? _.eql(val, value) : val === value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but its not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers',\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    this.assert(\n        list.indexOf(expected) > -1\n      , 'expected #{this} to be one of #{exp}'\n      , 'expected #{this} to not be one of #{exp}'\n      , list\n      , expected\n    );\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   * assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.2.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n","module.exports = require('./lib/chai');\n","/*!\nCopyright (C) 2010-2013 Raymond Hill: https://github.com/gorhill/Javascript-Voronoi\nMIT License: See https://github.com/gorhill/Javascript-Voronoi/LICENSE.md\n*/\n/*\nAuthor: Raymond Hill (rhill@raymondhill.net)\nContributor: Jesse Morgan (morgajel@gmail.com)\nFile: rhill-voronoi-core.js\nVersion: 0.98\nDate: January 21, 2013\nDescription: This is my personal Javascript implementation of\nSteven Fortune's algorithm to compute Voronoi diagrams.\n\nLicense: See https://github.com/gorhill/Javascript-Voronoi/LICENSE.md\nCredits: See https://github.com/gorhill/Javascript-Voronoi/CREDITS.md\nHistory: See https://github.com/gorhill/Javascript-Voronoi/CHANGELOG.md\n\n## Usage:\n\n  var sites = [{x:300,y:300}, {x:100,y:100}, {x:200,y:500}, {x:250,y:450}, {x:600,y:150}];\n  // xl, xr means x left, x right\n  // yt, yb means y top, y bottom\n  var bbox = {xl:0, xr:800, yt:0, yb:600};\n  var voronoi = new Voronoi();\n  // pass an object which exhibits xl, xr, yt, yb properties. The bounding\n  // box will be used to connect unbound edges, and to close open cells\n  result = voronoi.compute(sites, bbox);\n  // render, further analyze, etc.\n\nReturn value:\n  An object with the following properties:\n\n  result.vertices = an array of unordered, unique Voronoi.Vertex objects making\n    up the Voronoi diagram.\n  result.edges = an array of unordered, unique Voronoi.Edge objects making up\n    the Voronoi diagram.\n  result.cells = an array of Voronoi.Cell object making up the Voronoi diagram.\n    A Cell object might have an empty array of halfedges, meaning no Voronoi\n    cell could be computed for a particular cell.\n  result.execTime = the time it took to compute the Voronoi diagram, in\n    milliseconds.\n\nVoronoi.Vertex object:\n  x: The x position of the vertex.\n  y: The y position of the vertex.\n\nVoronoi.Edge object:\n  lSite: the Voronoi site object at the left of this Voronoi.Edge object.\n  rSite: the Voronoi site object at the right of this Voronoi.Edge object (can\n    be null).\n  va: an object with an 'x' and a 'y' property defining the start point\n    (relative to the Voronoi site on the left) of this Voronoi.Edge object.\n  vb: an object with an 'x' and a 'y' property defining the end point\n    (relative to Voronoi site on the left) of this Voronoi.Edge object.\n\n  For edges which are used to close open cells (using the supplied bounding\n  box), the rSite property will be null.\n\nVoronoi.Cell object:\n  site: the Voronoi site object associated with the Voronoi cell.\n  halfedges: an array of Voronoi.Halfedge objects, ordered counterclockwise,\n    defining the polygon for this Voronoi cell.\n\nVoronoi.Halfedge object:\n  site: the Voronoi site object owning this Voronoi.Halfedge object.\n  edge: a reference to the unique Voronoi.Edge object underlying this\n    Voronoi.Halfedge object.\n  getStartpoint(): a method returning an object with an 'x' and a 'y' property\n    for the start point of this halfedge. Keep in mind halfedges are always\n    countercockwise.\n  getEndpoint(): a method returning an object with an 'x' and a 'y' property\n    for the end point of this halfedge. Keep in mind halfedges are always\n    countercockwise.\n\nTODO: Identify opportunities for performance improvement.\n\nTODO: Let the user close the Voronoi cells, do not do it automatically. Not only let\n      him close the cells, but also allow him to close more than once using a different\n      bounding box for the same Voronoi diagram.\n*/\n\n/*global Math */\n\n// ---------------------------------------------------------------------------\n\nfunction Voronoi() {\n    this.vertices = null;\n    this.edges = null;\n    this.cells = null;\n    this.toRecycle = null;\n    this.beachsectionJunkyard = [];\n    this.circleEventJunkyard = [];\n    this.vertexJunkyard = [];\n    this.edgeJunkyard = [];\n    this.cellJunkyard = [];\n    }\n\n// ---------------------------------------------------------------------------\n\nVoronoi.prototype.reset = function() {\n    if (!this.beachline) {\n        this.beachline = new this.RBTree();\n        }\n    // Move leftover beachsections to the beachsection junkyard.\n    if (this.beachline.root) {\n        var beachsection = this.beachline.getFirst(this.beachline.root);\n        while (beachsection) {\n            this.beachsectionJunkyard.push(beachsection); // mark for reuse\n            beachsection = beachsection.rbNext;\n            }\n        }\n    this.beachline.root = null;\n    if (!this.circleEvents) {\n        this.circleEvents = new this.RBTree();\n        }\n    this.circleEvents.root = this.firstCircleEvent = null;\n    this.vertices = [];\n    this.edges = [];\n    this.cells = [];\n    };\n\nVoronoi.prototype.sqrt = Math.sqrt;\nVoronoi.prototype.abs = Math.abs;\nVoronoi.prototype.ε = Voronoi.ε = 1e-9;\nVoronoi.prototype.invε = Voronoi.invε = 1.0 / Voronoi.ε;\nVoronoi.prototype.equalWithEpsilon = function(a,b){return this.abs(a-b)<1e-9;};\nVoronoi.prototype.greaterThanWithEpsilon = function(a,b){return a-b>1e-9;};\nVoronoi.prototype.greaterThanOrEqualWithEpsilon = function(a,b){return b-a<1e-9;};\nVoronoi.prototype.lessThanWithEpsilon = function(a,b){return b-a>1e-9;};\nVoronoi.prototype.lessThanOrEqualWithEpsilon = function(a,b){return a-b<1e-9;};\n\n// ---------------------------------------------------------------------------\n// Red-Black tree code (based on C version of \"rbtree\" by Franck Bui-Huu\n// https://github.com/fbuihuu/libtree/blob/master/rb.c\n\nVoronoi.prototype.RBTree = function() {\n    this.root = null;\n    };\n\nVoronoi.prototype.RBTree.prototype.rbInsertSuccessor = function(node, successor) {\n    var parent;\n    if (node) {\n        // >>> rhill 2011-05-27: Performance: cache previous/next nodes\n        successor.rbPrevious = node;\n        successor.rbNext = node.rbNext;\n        if (node.rbNext) {\n            node.rbNext.rbPrevious = successor;\n            }\n        node.rbNext = successor;\n        // <<<\n        if (node.rbRight) {\n            // in-place expansion of node.rbRight.getFirst();\n            node = node.rbRight;\n            while (node.rbLeft) {node = node.rbLeft;}\n            node.rbLeft = successor;\n            }\n        else {\n            node.rbRight = successor;\n            }\n        parent = node;\n        }\n    // rhill 2011-06-07: if node is null, successor must be inserted\n    // to the left-most part of the tree\n    else if (this.root) {\n        node = this.getFirst(this.root);\n        // >>> Performance: cache previous/next nodes\n        successor.rbPrevious = null;\n        successor.rbNext = node;\n        node.rbPrevious = successor;\n        // <<<\n        node.rbLeft = successor;\n        parent = node;\n        }\n    else {\n        // >>> Performance: cache previous/next nodes\n        successor.rbPrevious = successor.rbNext = null;\n        // <<<\n        this.root = successor;\n        parent = null;\n        }\n    successor.rbLeft = successor.rbRight = null;\n    successor.rbParent = parent;\n    successor.rbRed = true;\n    // Fixup the modified tree by recoloring nodes and performing\n    // rotations (2 at most) hence the red-black tree properties are\n    // preserved.\n    var grandpa, uncle;\n    node = successor;\n    while (parent && parent.rbRed) {\n        grandpa = parent.rbParent;\n        if (parent === grandpa.rbLeft) {\n            uncle = grandpa.rbRight;\n            if (uncle && uncle.rbRed) {\n                parent.rbRed = uncle.rbRed = false;\n                grandpa.rbRed = true;\n                node = grandpa;\n                }\n            else {\n                if (node === parent.rbRight) {\n                    this.rbRotateLeft(parent);\n                    node = parent;\n                    parent = node.rbParent;\n                    }\n                parent.rbRed = false;\n                grandpa.rbRed = true;\n                this.rbRotateRight(grandpa);\n                }\n            }\n        else {\n            uncle = grandpa.rbLeft;\n            if (uncle && uncle.rbRed) {\n                parent.rbRed = uncle.rbRed = false;\n                grandpa.rbRed = true;\n                node = grandpa;\n                }\n            else {\n                if (node === parent.rbLeft) {\n                    this.rbRotateRight(parent);\n                    node = parent;\n                    parent = node.rbParent;\n                    }\n                parent.rbRed = false;\n                grandpa.rbRed = true;\n                this.rbRotateLeft(grandpa);\n                }\n            }\n        parent = node.rbParent;\n        }\n    this.root.rbRed = false;\n    };\n\nVoronoi.prototype.RBTree.prototype.rbRemoveNode = function(node) {\n    // >>> rhill 2011-05-27: Performance: cache previous/next nodes\n    if (node.rbNext) {\n        node.rbNext.rbPrevious = node.rbPrevious;\n        }\n    if (node.rbPrevious) {\n        node.rbPrevious.rbNext = node.rbNext;\n        }\n    node.rbNext = node.rbPrevious = null;\n    // <<<\n    var parent = node.rbParent,\n        left = node.rbLeft,\n        right = node.rbRight,\n        next;\n    if (!left) {\n        next = right;\n        }\n    else if (!right) {\n        next = left;\n        }\n    else {\n        next = this.getFirst(right);\n        }\n    if (parent) {\n        if (parent.rbLeft === node) {\n            parent.rbLeft = next;\n            }\n        else {\n            parent.rbRight = next;\n            }\n        }\n    else {\n        this.root = next;\n        }\n    // enforce red-black rules\n    var isRed;\n    if (left && right) {\n        isRed = next.rbRed;\n        next.rbRed = node.rbRed;\n        next.rbLeft = left;\n        left.rbParent = next;\n        if (next !== right) {\n            parent = next.rbParent;\n            next.rbParent = node.rbParent;\n            node = next.rbRight;\n            parent.rbLeft = node;\n            next.rbRight = right;\n            right.rbParent = next;\n            }\n        else {\n            next.rbParent = parent;\n            parent = next;\n            node = next.rbRight;\n            }\n        }\n    else {\n        isRed = node.rbRed;\n        node = next;\n        }\n    // 'node' is now the sole successor's child and 'parent' its\n    // new parent (since the successor can have been moved)\n    if (node) {\n        node.rbParent = parent;\n        }\n    // the 'easy' cases\n    if (isRed) {return;}\n    if (node && node.rbRed) {\n        node.rbRed = false;\n        return;\n        }\n    // the other cases\n    var sibling;\n    do {\n        if (node === this.root) {\n            break;\n            }\n        if (node === parent.rbLeft) {\n            sibling = parent.rbRight;\n            if (sibling.rbRed) {\n                sibling.rbRed = false;\n                parent.rbRed = true;\n                this.rbRotateLeft(parent);\n                sibling = parent.rbRight;\n                }\n            if ((sibling.rbLeft && sibling.rbLeft.rbRed) || (sibling.rbRight && sibling.rbRight.rbRed)) {\n                if (!sibling.rbRight || !sibling.rbRight.rbRed) {\n                    sibling.rbLeft.rbRed = false;\n                    sibling.rbRed = true;\n                    this.rbRotateRight(sibling);\n                    sibling = parent.rbRight;\n                    }\n                sibling.rbRed = parent.rbRed;\n                parent.rbRed = sibling.rbRight.rbRed = false;\n                this.rbRotateLeft(parent);\n                node = this.root;\n                break;\n                }\n            }\n        else {\n            sibling = parent.rbLeft;\n            if (sibling.rbRed) {\n                sibling.rbRed = false;\n                parent.rbRed = true;\n                this.rbRotateRight(parent);\n                sibling = parent.rbLeft;\n                }\n            if ((sibling.rbLeft && sibling.rbLeft.rbRed) || (sibling.rbRight && sibling.rbRight.rbRed)) {\n                if (!sibling.rbLeft || !sibling.rbLeft.rbRed) {\n                    sibling.rbRight.rbRed = false;\n                    sibling.rbRed = true;\n                    this.rbRotateLeft(sibling);\n                    sibling = parent.rbLeft;\n                    }\n                sibling.rbRed = parent.rbRed;\n                parent.rbRed = sibling.rbLeft.rbRed = false;\n                this.rbRotateRight(parent);\n                node = this.root;\n                break;\n                }\n            }\n        sibling.rbRed = true;\n        node = parent;\n        parent = parent.rbParent;\n    } while (!node.rbRed);\n    if (node) {node.rbRed = false;}\n    };\n\nVoronoi.prototype.RBTree.prototype.rbRotateLeft = function(node) {\n    var p = node,\n        q = node.rbRight, // can't be null\n        parent = p.rbParent;\n    if (parent) {\n        if (parent.rbLeft === p) {\n            parent.rbLeft = q;\n            }\n        else {\n            parent.rbRight = q;\n            }\n        }\n    else {\n        this.root = q;\n        }\n    q.rbParent = parent;\n    p.rbParent = q;\n    p.rbRight = q.rbLeft;\n    if (p.rbRight) {\n        p.rbRight.rbParent = p;\n        }\n    q.rbLeft = p;\n    };\n\nVoronoi.prototype.RBTree.prototype.rbRotateRight = function(node) {\n    var p = node,\n        q = node.rbLeft, // can't be null\n        parent = p.rbParent;\n    if (parent) {\n        if (parent.rbLeft === p) {\n            parent.rbLeft = q;\n            }\n        else {\n            parent.rbRight = q;\n            }\n        }\n    else {\n        this.root = q;\n        }\n    q.rbParent = parent;\n    p.rbParent = q;\n    p.rbLeft = q.rbRight;\n    if (p.rbLeft) {\n        p.rbLeft.rbParent = p;\n        }\n    q.rbRight = p;\n    };\n\nVoronoi.prototype.RBTree.prototype.getFirst = function(node) {\n    while (node.rbLeft) {\n        node = node.rbLeft;\n        }\n    return node;\n    };\n\nVoronoi.prototype.RBTree.prototype.getLast = function(node) {\n    while (node.rbRight) {\n        node = node.rbRight;\n        }\n    return node;\n    };\n\n// ---------------------------------------------------------------------------\n// Diagram methods\n\nVoronoi.prototype.Diagram = function(site) {\n    this.site = site;\n    };\n\n// ---------------------------------------------------------------------------\n// Cell methods\n\nVoronoi.prototype.Cell = function(site) {\n    this.site = site;\n    this.halfedges = [];\n    this.closeMe = false;\n    };\n\nVoronoi.prototype.Cell.prototype.init = function(site) {\n    this.site = site;\n    this.halfedges = [];\n    this.closeMe = false;\n    return this;\n    };\n\nVoronoi.prototype.createCell = function(site) {\n    var cell = this.cellJunkyard.pop();\n    if ( cell ) {\n        return cell.init(site);\n        }\n    return new this.Cell(site);\n    };\n\nVoronoi.prototype.Cell.prototype.prepareHalfedges = function() {\n    var halfedges = this.halfedges,\n        iHalfedge = halfedges.length,\n        edge;\n    // get rid of unused halfedges\n    // rhill 2011-05-27: Keep it simple, no point here in trying\n    // to be fancy: dangling edges are a typically a minority.\n    while (iHalfedge--) {\n        edge = halfedges[iHalfedge].edge;\n        if (!edge.vb || !edge.va) {\n            halfedges.splice(iHalfedge,1);\n            }\n        }\n\n    // rhill 2011-05-26: I tried to use a binary search at insertion\n    // time to keep the array sorted on-the-fly (in Cell.addHalfedge()).\n    // There was no real benefits in doing so, performance on\n    // Firefox 3.6 was improved marginally, while performance on\n    // Opera 11 was penalized marginally.\n    halfedges.sort(function(a,b){return b.angle-a.angle;});\n    return halfedges.length;\n    };\n\n// Return a list of the neighbor Ids\nVoronoi.prototype.Cell.prototype.getNeighborIds = function() {\n    var neighbors = [],\n        iHalfedge = this.halfedges.length,\n        edge;\n    while (iHalfedge--){\n        edge = this.halfedges[iHalfedge].edge;\n        if (edge.lSite !== null && edge.lSite.voronoiId != this.site.voronoiId) {\n            neighbors.push(edge.lSite.voronoiId);\n            }\n        else if (edge.rSite !== null && edge.rSite.voronoiId != this.site.voronoiId){\n            neighbors.push(edge.rSite.voronoiId);\n            }\n        }\n    return neighbors;\n    };\n\n// Compute bounding box\n//\nVoronoi.prototype.Cell.prototype.getBbox = function() {\n    var halfedges = this.halfedges,\n        iHalfedge = halfedges.length,\n        xmin = Infinity,\n        ymin = Infinity,\n        xmax = -Infinity,\n        ymax = -Infinity,\n        v, vx, vy;\n    while (iHalfedge--) {\n        v = halfedges[iHalfedge].getStartpoint();\n        vx = v.x;\n        vy = v.y;\n        if (vx < xmin) {xmin = vx;}\n        if (vy < ymin) {ymin = vy;}\n        if (vx > xmax) {xmax = vx;}\n        if (vy > ymax) {ymax = vy;}\n        // we dont need to take into account end point,\n        // since each end point matches a start point\n        }\n    return {\n        x: xmin,\n        y: ymin,\n        width: xmax-xmin,\n        height: ymax-ymin\n        };\n    };\n\n// Return whether a point is inside, on, or outside the cell:\n//   -1: point is outside the perimeter of the cell\n//    0: point is on the perimeter of the cell\n//    1: point is inside the perimeter of the cell\n//\nVoronoi.prototype.Cell.prototype.pointIntersection = function(x, y) {\n    // Check if point in polygon. Since all polygons of a Voronoi\n    // diagram are convex, then:\n    // http://paulbourke.net/geometry/polygonmesh/\n    // Solution 3 (2D):\n    //   \"If the polygon is convex then one can consider the polygon\n    //   \"as a 'path' from the first vertex. A point is on the interior\n    //   \"of this polygons if it is always on the same side of all the\n    //   \"line segments making up the path. ...\n    //   \"(y - y0) (x1 - x0) - (x - x0) (y1 - y0)\n    //   \"if it is less than 0 then P is to the right of the line segment,\n    //   \"if greater than 0 it is to the left, if equal to 0 then it lies\n    //   \"on the line segment\"\n    var halfedges = this.halfedges,\n        iHalfedge = halfedges.length,\n        halfedge,\n        p0, p1, r;\n    while (iHalfedge--) {\n        halfedge = halfedges[iHalfedge];\n        p0 = halfedge.getStartpoint();\n        p1 = halfedge.getEndpoint();\n        r = (y-p0.y)*(p1.x-p0.x)-(x-p0.x)*(p1.y-p0.y);\n        if (!r) {\n            return 0;\n            }\n        if (r > 0) {\n            return -1;\n            }\n        }\n    return 1;\n    };\n\n// ---------------------------------------------------------------------------\n// Edge methods\n//\n\nVoronoi.prototype.Vertex = function(x, y) {\n    this.x = x;\n    this.y = y;\n    };\n\nVoronoi.prototype.Edge = function(lSite, rSite) {\n    this.lSite = lSite;\n    this.rSite = rSite;\n    this.va = this.vb = null;\n    };\n\nVoronoi.prototype.Halfedge = function(edge, lSite, rSite) {\n    this.site = lSite;\n    this.edge = edge;\n    // 'angle' is a value to be used for properly sorting the\n    // halfsegments counterclockwise. By convention, we will\n    // use the angle of the line defined by the 'site to the left'\n    // to the 'site to the right'.\n    // However, border edges have no 'site to the right': thus we\n    // use the angle of line perpendicular to the halfsegment (the\n    // edge should have both end points defined in such case.)\n    if (rSite) {\n        this.angle = Math.atan2(rSite.y-lSite.y, rSite.x-lSite.x);\n        }\n    else {\n        var va = edge.va,\n            vb = edge.vb;\n        // rhill 2011-05-31: used to call getStartpoint()/getEndpoint(),\n        // but for performance purpose, these are expanded in place here.\n        this.angle = edge.lSite === lSite ?\n            Math.atan2(vb.x-va.x, va.y-vb.y) :\n            Math.atan2(va.x-vb.x, vb.y-va.y);\n        }\n    };\n\nVoronoi.prototype.createHalfedge = function(edge, lSite, rSite) {\n    return new this.Halfedge(edge, lSite, rSite);\n    };\n\nVoronoi.prototype.Halfedge.prototype.getStartpoint = function() {\n    return this.edge.lSite === this.site ? this.edge.va : this.edge.vb;\n    };\n\nVoronoi.prototype.Halfedge.prototype.getEndpoint = function() {\n    return this.edge.lSite === this.site ? this.edge.vb : this.edge.va;\n    };\n\n\n\n// this create and add a vertex to the internal collection\n\nVoronoi.prototype.createVertex = function(x, y) {\n    var v = this.vertexJunkyard.pop();\n    if ( !v ) {\n        v = new this.Vertex(x, y);\n        }\n    else {\n        v.x = x;\n        v.y = y;\n        }\n    this.vertices.push(v);\n    return v;\n    };\n\n// this create and add an edge to internal collection, and also create\n// two halfedges which are added to each site's counterclockwise array\n// of halfedges.\n\nVoronoi.prototype.createEdge = function(lSite, rSite, va, vb) {\n    var edge = this.edgeJunkyard.pop();\n    if ( !edge ) {\n        edge = new this.Edge(lSite, rSite);\n        }\n    else {\n        edge.lSite = lSite;\n        edge.rSite = rSite;\n        edge.va = edge.vb = null;\n        }\n\n    this.edges.push(edge);\n    if (va) {\n        this.setEdgeStartpoint(edge, lSite, rSite, va);\n        }\n    if (vb) {\n        this.setEdgeEndpoint(edge, lSite, rSite, vb);\n        }\n    this.cells[lSite.voronoiId].halfedges.push(this.createHalfedge(edge, lSite, rSite));\n    this.cells[rSite.voronoiId].halfedges.push(this.createHalfedge(edge, rSite, lSite));\n    return edge;\n    };\n\nVoronoi.prototype.createBorderEdge = function(lSite, va, vb) {\n    var edge = this.edgeJunkyard.pop();\n    if ( !edge ) {\n        edge = new this.Edge(lSite, null);\n        }\n    else {\n        edge.lSite = lSite;\n        edge.rSite = null;\n        }\n    edge.va = va;\n    edge.vb = vb;\n    this.edges.push(edge);\n    return edge;\n    };\n\nVoronoi.prototype.setEdgeStartpoint = function(edge, lSite, rSite, vertex) {\n    if (!edge.va && !edge.vb) {\n        edge.va = vertex;\n        edge.lSite = lSite;\n        edge.rSite = rSite;\n        }\n    else if (edge.lSite === rSite) {\n        edge.vb = vertex;\n        }\n    else {\n        edge.va = vertex;\n        }\n    };\n\nVoronoi.prototype.setEdgeEndpoint = function(edge, lSite, rSite, vertex) {\n    this.setEdgeStartpoint(edge, rSite, lSite, vertex);\n    };\n\n// ---------------------------------------------------------------------------\n// Beachline methods\n\n// rhill 2011-06-07: For some reasons, performance suffers significantly\n// when instanciating a literal object instead of an empty ctor\nVoronoi.prototype.Beachsection = function() {\n    };\n\n// rhill 2011-06-02: A lot of Beachsection instanciations\n// occur during the computation of the Voronoi diagram,\n// somewhere between the number of sites and twice the\n// number of sites, while the number of Beachsections on the\n// beachline at any given time is comparatively low. For this\n// reason, we reuse already created Beachsections, in order\n// to avoid new memory allocation. This resulted in a measurable\n// performance gain.\n\nVoronoi.prototype.createBeachsection = function(site) {\n    var beachsection = this.beachsectionJunkyard.pop();\n    if (!beachsection) {\n        beachsection = new this.Beachsection();\n        }\n    beachsection.site = site;\n    return beachsection;\n    };\n\n// calculate the left break point of a particular beach section,\n// given a particular sweep line\nVoronoi.prototype.leftBreakPoint = function(arc, directrix) {\n    // http://en.wikipedia.org/wiki/Parabola\n    // http://en.wikipedia.org/wiki/Quadratic_equation\n    // h1 = x1,\n    // k1 = (y1+directrix)/2,\n    // h2 = x2,\n    // k2 = (y2+directrix)/2,\n    // p1 = k1-directrix,\n    // a1 = 1/(4*p1),\n    // b1 = -h1/(2*p1),\n    // c1 = h1*h1/(4*p1)+k1,\n    // p2 = k2-directrix,\n    // a2 = 1/(4*p2),\n    // b2 = -h2/(2*p2),\n    // c2 = h2*h2/(4*p2)+k2,\n    // x = (-(b2-b1) + Math.sqrt((b2-b1)*(b2-b1) - 4*(a2-a1)*(c2-c1))) / (2*(a2-a1))\n    // When x1 become the x-origin:\n    // h1 = 0,\n    // k1 = (y1+directrix)/2,\n    // h2 = x2-x1,\n    // k2 = (y2+directrix)/2,\n    // p1 = k1-directrix,\n    // a1 = 1/(4*p1),\n    // b1 = 0,\n    // c1 = k1,\n    // p2 = k2-directrix,\n    // a2 = 1/(4*p2),\n    // b2 = -h2/(2*p2),\n    // c2 = h2*h2/(4*p2)+k2,\n    // x = (-b2 + Math.sqrt(b2*b2 - 4*(a2-a1)*(c2-k1))) / (2*(a2-a1)) + x1\n\n    // change code below at your own risk: care has been taken to\n    // reduce errors due to computers' finite arithmetic precision.\n    // Maybe can still be improved, will see if any more of this\n    // kind of errors pop up again.\n    var site = arc.site,\n        rfocx = site.x,\n        rfocy = site.y,\n        pby2 = rfocy-directrix;\n    // parabola in degenerate case where focus is on directrix\n    if (!pby2) {\n        return rfocx;\n        }\n    var lArc = arc.rbPrevious;\n    if (!lArc) {\n        return -Infinity;\n        }\n    site = lArc.site;\n    var lfocx = site.x,\n        lfocy = site.y,\n        plby2 = lfocy-directrix;\n    // parabola in degenerate case where focus is on directrix\n    if (!plby2) {\n        return lfocx;\n        }\n    var hl = lfocx-rfocx,\n        aby2 = 1/pby2-1/plby2,\n        b = hl/plby2;\n    if (aby2) {\n        return (-b+this.sqrt(b*b-2*aby2*(hl*hl/(-2*plby2)-lfocy+plby2/2+rfocy-pby2/2)))/aby2+rfocx;\n        }\n    // both parabolas have same distance to directrix, thus break point is midway\n    return (rfocx+lfocx)/2;\n    };\n\n// calculate the right break point of a particular beach section,\n// given a particular directrix\nVoronoi.prototype.rightBreakPoint = function(arc, directrix) {\n    var rArc = arc.rbNext;\n    if (rArc) {\n        return this.leftBreakPoint(rArc, directrix);\n        }\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n    };\n\nVoronoi.prototype.detachBeachsection = function(beachsection) {\n    this.detachCircleEvent(beachsection); // detach potentially attached circle event\n    this.beachline.rbRemoveNode(beachsection); // remove from RB-tree\n    this.beachsectionJunkyard.push(beachsection); // mark for reuse\n    };\n\nVoronoi.prototype.removeBeachsection = function(beachsection) {\n    var circle = beachsection.circleEvent,\n        x = circle.x,\n        y = circle.ycenter,\n        vertex = this.createVertex(x, y),\n        previous = beachsection.rbPrevious,\n        next = beachsection.rbNext,\n        disappearingTransitions = [beachsection],\n        abs_fn = Math.abs;\n\n    // remove collapsed beachsection from beachline\n    this.detachBeachsection(beachsection);\n\n    // there could be more than one empty arc at the deletion point, this\n    // happens when more than two edges are linked by the same vertex,\n    // so we will collect all those edges by looking up both sides of\n    // the deletion point.\n    // by the way, there is *always* a predecessor/successor to any collapsed\n    // beach section, it's just impossible to have a collapsing first/last\n    // beach sections on the beachline, since they obviously are unconstrained\n    // on their left/right side.\n\n    // look left\n    var lArc = previous;\n    while (lArc.circleEvent && abs_fn(x-lArc.circleEvent.x)<1e-9 && abs_fn(y-lArc.circleEvent.ycenter)<1e-9) {\n        previous = lArc.rbPrevious;\n        disappearingTransitions.unshift(lArc);\n        this.detachBeachsection(lArc); // mark for reuse\n        lArc = previous;\n        }\n    // even though it is not disappearing, I will also add the beach section\n    // immediately to the left of the left-most collapsed beach section, for\n    // convenience, since we need to refer to it later as this beach section\n    // is the 'left' site of an edge for which a start point is set.\n    disappearingTransitions.unshift(lArc);\n    this.detachCircleEvent(lArc);\n\n    // look right\n    var rArc = next;\n    while (rArc.circleEvent && abs_fn(x-rArc.circleEvent.x)<1e-9 && abs_fn(y-rArc.circleEvent.ycenter)<1e-9) {\n        next = rArc.rbNext;\n        disappearingTransitions.push(rArc);\n        this.detachBeachsection(rArc); // mark for reuse\n        rArc = next;\n        }\n    // we also have to add the beach section immediately to the right of the\n    // right-most collapsed beach section, since there is also a disappearing\n    // transition representing an edge's start point on its left.\n    disappearingTransitions.push(rArc);\n    this.detachCircleEvent(rArc);\n\n    // walk through all the disappearing transitions between beach sections and\n    // set the start point of their (implied) edge.\n    var nArcs = disappearingTransitions.length,\n        iArc;\n    for (iArc=1; iArc<nArcs; iArc++) {\n        rArc = disappearingTransitions[iArc];\n        lArc = disappearingTransitions[iArc-1];\n        this.setEdgeStartpoint(rArc.edge, lArc.site, rArc.site, vertex);\n        }\n\n    // create a new edge as we have now a new transition between\n    // two beach sections which were previously not adjacent.\n    // since this edge appears as a new vertex is defined, the vertex\n    // actually define an end point of the edge (relative to the site\n    // on the left)\n    lArc = disappearingTransitions[0];\n    rArc = disappearingTransitions[nArcs-1];\n    rArc.edge = this.createEdge(lArc.site, rArc.site, undefined, vertex);\n\n    // create circle events if any for beach sections left in the beachline\n    // adjacent to collapsed sections\n    this.attachCircleEvent(lArc);\n    this.attachCircleEvent(rArc);\n    };\n\nVoronoi.prototype.addBeachsection = function(site) {\n    var x = site.x,\n        directrix = site.y;\n\n    // find the left and right beach sections which will surround the newly\n    // created beach section.\n    // rhill 2011-06-01: This loop is one of the most often executed,\n    // hence we expand in-place the comparison-against-epsilon calls.\n    var lArc, rArc,\n        dxl, dxr,\n        node = this.beachline.root;\n\n    while (node) {\n        dxl = this.leftBreakPoint(node,directrix)-x;\n        // x lessThanWithEpsilon xl => falls somewhere before the left edge of the beachsection\n        if (dxl > 1e-9) {\n            // this case should never happen\n            // if (!node.rbLeft) {\n            //    rArc = node.rbLeft;\n            //    break;\n            //    }\n            node = node.rbLeft;\n            }\n        else {\n            dxr = x-this.rightBreakPoint(node,directrix);\n            // x greaterThanWithEpsilon xr => falls somewhere after the right edge of the beachsection\n            if (dxr > 1e-9) {\n                if (!node.rbRight) {\n                    lArc = node;\n                    break;\n                    }\n                node = node.rbRight;\n                }\n            else {\n                // x equalWithEpsilon xl => falls exactly on the left edge of the beachsection\n                if (dxl > -1e-9) {\n                    lArc = node.rbPrevious;\n                    rArc = node;\n                    }\n                // x equalWithEpsilon xr => falls exactly on the right edge of the beachsection\n                else if (dxr > -1e-9) {\n                    lArc = node;\n                    rArc = node.rbNext;\n                    }\n                // falls exactly somewhere in the middle of the beachsection\n                else {\n                    lArc = rArc = node;\n                    }\n                break;\n                }\n            }\n        }\n    // at this point, keep in mind that lArc and/or rArc could be\n    // undefined or null.\n\n    // create a new beach section object for the site and add it to RB-tree\n    var newArc = this.createBeachsection(site);\n    this.beachline.rbInsertSuccessor(lArc, newArc);\n\n    // cases:\n    //\n\n    // [null,null]\n    // least likely case: new beach section is the first beach section on the\n    // beachline.\n    // This case means:\n    //   no new transition appears\n    //   no collapsing beach section\n    //   new beachsection become root of the RB-tree\n    if (!lArc && !rArc) {\n        return;\n        }\n\n    // [lArc,rArc] where lArc == rArc\n    // most likely case: new beach section split an existing beach\n    // section.\n    // This case means:\n    //   one new transition appears\n    //   the left and right beach section might be collapsing as a result\n    //   two new nodes added to the RB-tree\n    if (lArc === rArc) {\n        // invalidate circle event of split beach section\n        this.detachCircleEvent(lArc);\n\n        // split the beach section into two separate beach sections\n        rArc = this.createBeachsection(lArc.site);\n        this.beachline.rbInsertSuccessor(newArc, rArc);\n\n        // since we have a new transition between two beach sections,\n        // a new edge is born\n        newArc.edge = rArc.edge = this.createEdge(lArc.site, newArc.site);\n\n        // check whether the left and right beach sections are collapsing\n        // and if so create circle events, to be notified when the point of\n        // collapse is reached.\n        this.attachCircleEvent(lArc);\n        this.attachCircleEvent(rArc);\n        return;\n        }\n\n    // [lArc,null]\n    // even less likely case: new beach section is the *last* beach section\n    // on the beachline -- this can happen *only* if *all* the previous beach\n    // sections currently on the beachline share the same y value as\n    // the new beach section.\n    // This case means:\n    //   one new transition appears\n    //   no collapsing beach section as a result\n    //   new beach section become right-most node of the RB-tree\n    if (lArc && !rArc) {\n        newArc.edge = this.createEdge(lArc.site,newArc.site);\n        return;\n        }\n\n    // [null,rArc]\n    // impossible case: because sites are strictly processed from top to bottom,\n    // and left to right, which guarantees that there will always be a beach section\n    // on the left -- except of course when there are no beach section at all on\n    // the beach line, which case was handled above.\n    // rhill 2011-06-02: No point testing in non-debug version\n    //if (!lArc && rArc) {\n    //    throw \"Voronoi.addBeachsection(): What is this I don't even\";\n    //    }\n\n    // [lArc,rArc] where lArc != rArc\n    // somewhat less likely case: new beach section falls *exactly* in between two\n    // existing beach sections\n    // This case means:\n    //   one transition disappears\n    //   two new transitions appear\n    //   the left and right beach section might be collapsing as a result\n    //   only one new node added to the RB-tree\n    if (lArc !== rArc) {\n        // invalidate circle events of left and right sites\n        this.detachCircleEvent(lArc);\n        this.detachCircleEvent(rArc);\n\n        // an existing transition disappears, meaning a vertex is defined at\n        // the disappearance point.\n        // since the disappearance is caused by the new beachsection, the\n        // vertex is at the center of the circumscribed circle of the left,\n        // new and right beachsections.\n        // http://mathforum.org/library/drmath/view/55002.html\n        // Except that I bring the origin at A to simplify\n        // calculation\n        var lSite = lArc.site,\n            ax = lSite.x,\n            ay = lSite.y,\n            bx=site.x-ax,\n            by=site.y-ay,\n            rSite = rArc.site,\n            cx=rSite.x-ax,\n            cy=rSite.y-ay,\n            d=2*(bx*cy-by*cx),\n            hb=bx*bx+by*by,\n            hc=cx*cx+cy*cy,\n            vertex = this.createVertex((cy*hb-by*hc)/d+ax, (bx*hc-cx*hb)/d+ay);\n\n        // one transition disappear\n        this.setEdgeStartpoint(rArc.edge, lSite, rSite, vertex);\n\n        // two new transitions appear at the new vertex location\n        newArc.edge = this.createEdge(lSite, site, undefined, vertex);\n        rArc.edge = this.createEdge(site, rSite, undefined, vertex);\n\n        // check whether the left and right beach sections are collapsing\n        // and if so create circle events, to handle the point of collapse.\n        this.attachCircleEvent(lArc);\n        this.attachCircleEvent(rArc);\n        return;\n        }\n    };\n\n// ---------------------------------------------------------------------------\n// Circle event methods\n\n// rhill 2011-06-07: For some reasons, performance suffers significantly\n// when instanciating a literal object instead of an empty ctor\nVoronoi.prototype.CircleEvent = function() {\n    // rhill 2013-10-12: it helps to state exactly what we are at ctor time.\n    this.arc = null;\n    this.rbLeft = null;\n    this.rbNext = null;\n    this.rbParent = null;\n    this.rbPrevious = null;\n    this.rbRed = false;\n    this.rbRight = null;\n    this.site = null;\n    this.x = this.y = this.ycenter = 0;\n    };\n\nVoronoi.prototype.attachCircleEvent = function(arc) {\n    var lArc = arc.rbPrevious,\n        rArc = arc.rbNext;\n    if (!lArc || !rArc) {return;} // does that ever happen?\n    var lSite = lArc.site,\n        cSite = arc.site,\n        rSite = rArc.site;\n\n    // If site of left beachsection is same as site of\n    // right beachsection, there can't be convergence\n    if (lSite===rSite) {return;}\n\n    // Find the circumscribed circle for the three sites associated\n    // with the beachsection triplet.\n    // rhill 2011-05-26: It is more efficient to calculate in-place\n    // rather than getting the resulting circumscribed circle from an\n    // object returned by calling Voronoi.circumcircle()\n    // http://mathforum.org/library/drmath/view/55002.html\n    // Except that I bring the origin at cSite to simplify calculations.\n    // The bottom-most part of the circumcircle is our Fortune 'circle\n    // event', and its center is a vertex potentially part of the final\n    // Voronoi diagram.\n    var bx = cSite.x,\n        by = cSite.y,\n        ax = lSite.x-bx,\n        ay = lSite.y-by,\n        cx = rSite.x-bx,\n        cy = rSite.y-by;\n\n    // If points l->c->r are clockwise, then center beach section does not\n    // collapse, hence it can't end up as a vertex (we reuse 'd' here, which\n    // sign is reverse of the orientation, hence we reverse the test.\n    // http://en.wikipedia.org/wiki/Curve_orientation#Orientation_of_a_simple_polygon\n    // rhill 2011-05-21: Nasty finite precision error which caused circumcircle() to\n    // return infinites: 1e-12 seems to fix the problem.\n    var d = 2*(ax*cy-ay*cx);\n    if (d >= -2e-12){return;}\n\n    var ha = ax*ax+ay*ay,\n        hc = cx*cx+cy*cy,\n        x = (cy*ha-ay*hc)/d,\n        y = (ax*hc-cx*ha)/d,\n        ycenter = y+by;\n\n    // Important: ybottom should always be under or at sweep, so no need\n    // to waste CPU cycles by checking\n\n    // recycle circle event object if possible\n    var circleEvent = this.circleEventJunkyard.pop();\n    if (!circleEvent) {\n        circleEvent = new this.CircleEvent();\n        }\n    circleEvent.arc = arc;\n    circleEvent.site = cSite;\n    circleEvent.x = x+bx;\n    circleEvent.y = ycenter+this.sqrt(x*x+y*y); // y bottom\n    circleEvent.ycenter = ycenter;\n    arc.circleEvent = circleEvent;\n\n    // find insertion point in RB-tree: circle events are ordered from\n    // smallest to largest\n    var predecessor = null,\n        node = this.circleEvents.root;\n    while (node) {\n        if (circleEvent.y < node.y || (circleEvent.y === node.y && circleEvent.x <= node.x)) {\n            if (node.rbLeft) {\n                node = node.rbLeft;\n                }\n            else {\n                predecessor = node.rbPrevious;\n                break;\n                }\n            }\n        else {\n            if (node.rbRight) {\n                node = node.rbRight;\n                }\n            else {\n                predecessor = node;\n                break;\n                }\n            }\n        }\n    this.circleEvents.rbInsertSuccessor(predecessor, circleEvent);\n    if (!predecessor) {\n        this.firstCircleEvent = circleEvent;\n        }\n    };\n\nVoronoi.prototype.detachCircleEvent = function(arc) {\n    var circleEvent = arc.circleEvent;\n    if (circleEvent) {\n        if (!circleEvent.rbPrevious) {\n            this.firstCircleEvent = circleEvent.rbNext;\n            }\n        this.circleEvents.rbRemoveNode(circleEvent); // remove from RB-tree\n        this.circleEventJunkyard.push(circleEvent);\n        arc.circleEvent = null;\n        }\n    };\n\n// ---------------------------------------------------------------------------\n// Diagram completion methods\n\n// connect dangling edges (not if a cursory test tells us\n// it is not going to be visible.\n// return value:\n//   false: the dangling endpoint couldn't be connected\n//   true: the dangling endpoint could be connected\nVoronoi.prototype.connectEdge = function(edge, bbox) {\n    // skip if end point already connected\n    var vb = edge.vb;\n    if (!!vb) {return true;}\n\n    // make local copy for performance purpose\n    var va = edge.va,\n        xl = bbox.xl,\n        xr = bbox.xr,\n        yt = bbox.yt,\n        yb = bbox.yb,\n        lSite = edge.lSite,\n        rSite = edge.rSite,\n        lx = lSite.x,\n        ly = lSite.y,\n        rx = rSite.x,\n        ry = rSite.y,\n        fx = (lx+rx)/2,\n        fy = (ly+ry)/2,\n        fm, fb;\n\n    // if we reach here, this means cells which use this edge will need\n    // to be closed, whether because the edge was removed, or because it\n    // was connected to the bounding box.\n    this.cells[lSite.voronoiId].closeMe = true;\n    this.cells[rSite.voronoiId].closeMe = true;\n\n    // get the line equation of the bisector if line is not vertical\n    if (ry !== ly) {\n        fm = (lx-rx)/(ry-ly);\n        fb = fy-fm*fx;\n        }\n\n    // remember, direction of line (relative to left site):\n    // upward: left.x < right.x\n    // downward: left.x > right.x\n    // horizontal: left.x == right.x\n    // upward: left.x < right.x\n    // rightward: left.y < right.y\n    // leftward: left.y > right.y\n    // vertical: left.y == right.y\n\n    // depending on the direction, find the best side of the\n    // bounding box to use to determine a reasonable start point\n\n    // rhill 2013-12-02:\n    // While at it, since we have the values which define the line,\n    // clip the end of va if it is outside the bbox.\n    // https://github.com/gorhill/Javascript-Voronoi/issues/15\n    // TODO: Do all the clipping here rather than rely on Liang-Barsky\n    // which does not do well sometimes due to loss of arithmetic\n    // precision. The code here doesn't degrade if one of the vertex is\n    // at a huge distance.\n\n    // special case: vertical line\n    if (fm === undefined) {\n        // doesn't intersect with viewport\n        if (fx < xl || fx >= xr) {return false;}\n        // downward\n        if (lx > rx) {\n            if (!va || va.y < yt) {\n                va = this.createVertex(fx, yt);\n                }\n            else if (va.y >= yb) {\n                return false;\n                }\n            vb = this.createVertex(fx, yb);\n            }\n        // upward\n        else {\n            if (!va || va.y > yb) {\n                va = this.createVertex(fx, yb);\n                }\n            else if (va.y < yt) {\n                return false;\n                }\n            vb = this.createVertex(fx, yt);\n            }\n        }\n    // closer to vertical than horizontal, connect start point to the\n    // top or bottom side of the bounding box\n    else if (fm < -1 || fm > 1) {\n        // downward\n        if (lx > rx) {\n            if (!va || va.y < yt) {\n                va = this.createVertex((yt-fb)/fm, yt);\n                }\n            else if (va.y >= yb) {\n                return false;\n                }\n            vb = this.createVertex((yb-fb)/fm, yb);\n            }\n        // upward\n        else {\n            if (!va || va.y > yb) {\n                va = this.createVertex((yb-fb)/fm, yb);\n                }\n            else if (va.y < yt) {\n                return false;\n                }\n            vb = this.createVertex((yt-fb)/fm, yt);\n            }\n        }\n    // closer to horizontal than vertical, connect start point to the\n    // left or right side of the bounding box\n    else {\n        // rightward\n        if (ly < ry) {\n            if (!va || va.x < xl) {\n                va = this.createVertex(xl, fm*xl+fb);\n                }\n            else if (va.x >= xr) {\n                return false;\n                }\n            vb = this.createVertex(xr, fm*xr+fb);\n            }\n        // leftward\n        else {\n            if (!va || va.x > xr) {\n                va = this.createVertex(xr, fm*xr+fb);\n                }\n            else if (va.x < xl) {\n                return false;\n                }\n            vb = this.createVertex(xl, fm*xl+fb);\n            }\n        }\n    edge.va = va;\n    edge.vb = vb;\n\n    return true;\n    };\n\n// line-clipping code taken from:\n//   Liang-Barsky function by Daniel White\n//   http://www.skytopia.com/project/articles/compsci/clipping.html\n// Thanks!\n// A bit modified to minimize code paths\nVoronoi.prototype.clipEdge = function(edge, bbox) {\n    var ax = edge.va.x,\n        ay = edge.va.y,\n        bx = edge.vb.x,\n        by = edge.vb.y,\n        t0 = 0,\n        t1 = 1,\n        dx = bx-ax,\n        dy = by-ay;\n    // left\n    var q = ax-bbox.xl;\n    if (dx===0 && q<0) {return false;}\n    var r = -q/dx;\n    if (dx<0) {\n        if (r<t0) {return false;}\n        if (r<t1) {t1=r;}\n        }\n    else if (dx>0) {\n        if (r>t1) {return false;}\n        if (r>t0) {t0=r;}\n        }\n    // right\n    q = bbox.xr-ax;\n    if (dx===0 && q<0) {return false;}\n    r = q/dx;\n    if (dx<0) {\n        if (r>t1) {return false;}\n        if (r>t0) {t0=r;}\n        }\n    else if (dx>0) {\n        if (r<t0) {return false;}\n        if (r<t1) {t1=r;}\n        }\n    // top\n    q = ay-bbox.yt;\n    if (dy===0 && q<0) {return false;}\n    r = -q/dy;\n    if (dy<0) {\n        if (r<t0) {return false;}\n        if (r<t1) {t1=r;}\n        }\n    else if (dy>0) {\n        if (r>t1) {return false;}\n        if (r>t0) {t0=r;}\n        }\n    // bottom        \n    q = bbox.yb-ay;\n    if (dy===0 && q<0) {return false;}\n    r = q/dy;\n    if (dy<0) {\n        if (r>t1) {return false;}\n        if (r>t0) {t0=r;}\n        }\n    else if (dy>0) {\n        if (r<t0) {return false;}\n        if (r<t1) {t1=r;}\n        }\n\n    // if we reach this point, Voronoi edge is within bbox\n\n    // if t0 > 0, va needs to change\n    // rhill 2011-06-03: we need to create a new vertex rather\n    // than modifying the existing one, since the existing\n    // one is likely shared with at least another edge\n    if (t0 > 0) {\n        edge.va = this.createVertex(ax+t0*dx, ay+t0*dy);\n        }\n\n    // if t1 < 1, vb needs to change\n    // rhill 2011-06-03: we need to create a new vertex rather\n    // than modifying the existing one, since the existing\n    // one is likely shared with at least another edge\n    if (t1 < 1) {\n        edge.vb = this.createVertex(ax+t1*dx, ay+t1*dy);\n        }\n\n    // va and/or vb were clipped, thus we will need to close\n    // cells which use this edge.\n    if ( t0 > 0 || t1 < 1 ) {\n        this.cells[edge.lSite.voronoiId].closeMe = true;\n        this.cells[edge.rSite.voronoiId].closeMe = true;\n    }\n\n    return true;\n    };\n\n// Connect/cut edges at bounding box\nVoronoi.prototype.clipEdges = function(bbox) {\n    // connect all dangling edges to bounding box\n    // or get rid of them if it can't be done\n    var edges = this.edges,\n        iEdge = edges.length,\n        edge,\n        abs_fn = Math.abs;\n\n    // iterate backward so we can splice safely\n    while (iEdge--) {\n        edge = edges[iEdge];\n        // edge is removed if:\n        //   it is wholly outside the bounding box\n        //   it is looking more like a point than a line\n        if (!this.connectEdge(edge, bbox) ||\n            !this.clipEdge(edge, bbox) ||\n            (abs_fn(edge.va.x-edge.vb.x)<1e-9 && abs_fn(edge.va.y-edge.vb.y)<1e-9)) {\n            edge.va = edge.vb = null;\n            edges.splice(iEdge,1);\n            }\n        }\n    };\n\n// Close the cells.\n// The cells are bound by the supplied bounding box.\n// Each cell refers to its associated site, and a list\n// of halfedges ordered counterclockwise.\nVoronoi.prototype.closeCells = function(bbox) {\n    var xl = bbox.xl,\n        xr = bbox.xr,\n        yt = bbox.yt,\n        yb = bbox.yb,\n        cells = this.cells,\n        iCell = cells.length,\n        cell,\n        iLeft,\n        halfedges, nHalfedges,\n        edge,\n        va, vb, vz,\n        lastBorderSegment,\n        abs_fn = Math.abs;\n\n    while (iCell--) {\n        cell = cells[iCell];\n        // prune, order halfedges counterclockwise, then add missing ones\n        // required to close cells\n        if (!cell.prepareHalfedges()) {\n            continue;\n            }\n        if (!cell.closeMe) {\n            continue;\n            }\n        // find first 'unclosed' point.\n        // an 'unclosed' point will be the end point of a halfedge which\n        // does not match the start point of the following halfedge\n        halfedges = cell.halfedges;\n        nHalfedges = halfedges.length;\n        // special case: only one site, in which case, the viewport is the cell\n        // ...\n\n        // all other cases\n        iLeft = 0;\n        while (iLeft < nHalfedges) {\n            va = halfedges[iLeft].getEndpoint();\n            vz = halfedges[(iLeft+1) % nHalfedges].getStartpoint();\n            // if end point is not equal to start point, we need to add the missing\n            // halfedge(s) up to vz\n            if (abs_fn(va.x-vz.x)>=1e-9 || abs_fn(va.y-vz.y)>=1e-9) {\n\n                // rhill 2013-12-02:\n                // \"Holes\" in the halfedges are not necessarily always adjacent.\n                // https://github.com/gorhill/Javascript-Voronoi/issues/16\n\n                // find entry point:\n                switch (true) {\n\n                    // walk downward along left side\n                    case this.equalWithEpsilon(va.x,xl) && this.lessThanWithEpsilon(va.y,yb):\n                        lastBorderSegment = this.equalWithEpsilon(vz.x,xl);\n                        vb = this.createVertex(xl, lastBorderSegment ? vz.y : yb);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        va = vb;\n                        // fall through\n\n                    // walk rightward along bottom side\n                    case this.equalWithEpsilon(va.y,yb) && this.lessThanWithEpsilon(va.x,xr):\n                        lastBorderSegment = this.equalWithEpsilon(vz.y,yb);\n                        vb = this.createVertex(lastBorderSegment ? vz.x : xr, yb);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        va = vb;\n                        // fall through\n\n                    // walk upward along right side\n                    case this.equalWithEpsilon(va.x,xr) && this.greaterThanWithEpsilon(va.y,yt):\n                        lastBorderSegment = this.equalWithEpsilon(vz.x,xr);\n                        vb = this.createVertex(xr, lastBorderSegment ? vz.y : yt);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        va = vb;\n                        // fall through\n\n                    // walk leftward along top side\n                    case this.equalWithEpsilon(va.y,yt) && this.greaterThanWithEpsilon(va.x,xl):\n                        lastBorderSegment = this.equalWithEpsilon(vz.y,yt);\n                        vb = this.createVertex(lastBorderSegment ? vz.x : xl, yt);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        va = vb;\n                        // fall through\n\n                        // walk downward along left side\n                        lastBorderSegment = this.equalWithEpsilon(vz.x,xl);\n                        vb = this.createVertex(xl, lastBorderSegment ? vz.y : yb);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        va = vb;\n                        // fall through\n\n                        // walk rightward along bottom side\n                        lastBorderSegment = this.equalWithEpsilon(vz.y,yb);\n                        vb = this.createVertex(lastBorderSegment ? vz.x : xr, yb);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        va = vb;\n                        // fall through\n\n                        // walk upward along right side\n                        lastBorderSegment = this.equalWithEpsilon(vz.x,xr);\n                        vb = this.createVertex(xr, lastBorderSegment ? vz.y : yt);\n                        edge = this.createBorderEdge(cell.site, va, vb);\n                        iLeft++;\n                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));\n                        nHalfedges++;\n                        if ( lastBorderSegment ) { break; }\n                        // fall through\n\n                    default:\n                        throw \"Voronoi.closeCells() > this makes no sense!\";\n                    }\n                }\n            iLeft++;\n            }\n        cell.closeMe = false;\n        }\n    };\n\n// ---------------------------------------------------------------------------\n// Debugging helper\n/*\nVoronoi.prototype.dumpBeachline = function(y) {\n    console.log('Voronoi.dumpBeachline(%f) > Beachsections, from left to right:', y);\n    if ( !this.beachline ) {\n        console.log('  None');\n        }\n    else {\n        var bs = this.beachline.getFirst(this.beachline.root);\n        while ( bs ) {\n            console.log('  site %d: xl: %f, xr: %f', bs.site.voronoiId, this.leftBreakPoint(bs, y), this.rightBreakPoint(bs, y));\n            bs = bs.rbNext;\n            }\n        }\n    };\n*/\n\n// ---------------------------------------------------------------------------\n// Helper: Quantize sites\n\n// rhill 2013-10-12:\n// This is to solve https://github.com/gorhill/Javascript-Voronoi/issues/15\n// Since not all users will end up using the kind of coord values which would\n// cause the issue to arise, I chose to let the user decide whether or not\n// he should sanitize his coord values through this helper. This way, for\n// those users who uses coord values which are known to be fine, no overhead is\n// added.\n\nVoronoi.prototype.quantizeSites = function(sites) {\n    var ε = this.ε,\n        n = sites.length,\n        site;\n    while ( n-- ) {\n        site = sites[n];\n        site.x = Math.floor(site.x / ε) * ε;\n        site.y = Math.floor(site.y / ε) * ε;\n        }\n    };\n\n// ---------------------------------------------------------------------------\n// Helper: Recycle diagram: all vertex, edge and cell objects are\n// \"surrendered\" to the Voronoi object for reuse.\n// TODO: rhill-voronoi-core v2: more performance to be gained\n// when I change the semantic of what is returned.\n\nVoronoi.prototype.recycle = function(diagram) {\n    if ( diagram ) {\n        if ( diagram instanceof this.Diagram ) {\n            this.toRecycle = diagram;\n            }\n        else {\n            throw 'Voronoi.recycleDiagram() > Need a Diagram object.';\n            }\n        }\n    };\n\n// ---------------------------------------------------------------------------\n// Top-level Fortune loop\n\n// rhill 2011-05-19:\n//   Voronoi sites are kept client-side now, to allow\n//   user to freely modify content. At compute time,\n//   *references* to sites are copied locally.\n\nVoronoi.prototype.compute = function(sites, bbox) {\n    // to measure execution time\n    var startTime = new Date();\n\n    // init internal state\n    this.reset();\n\n    // any diagram data available for recycling?\n    // I do that here so that this is included in execution time\n    if ( this.toRecycle ) {\n        this.vertexJunkyard = this.vertexJunkyard.concat(this.toRecycle.vertices);\n        this.edgeJunkyard = this.edgeJunkyard.concat(this.toRecycle.edges);\n        this.cellJunkyard = this.cellJunkyard.concat(this.toRecycle.cells);\n        this.toRecycle = null;\n        }\n\n    // Initialize site event queue\n    var siteEvents = sites.slice(0);\n    siteEvents.sort(function(a,b){\n        var r = b.y - a.y;\n        if (r) {return r;}\n        return b.x - a.x;\n        });\n\n    // process queue\n    var site = siteEvents.pop(),\n        siteid = 0,\n        xsitex, // to avoid duplicate sites\n        xsitey,\n        cells = this.cells,\n        circle;\n\n    // main loop\n    for (;;) {\n        // we need to figure whether we handle a site or circle event\n        // for this we find out if there is a site event and it is\n        // 'earlier' than the circle event\n        circle = this.firstCircleEvent;\n\n        // add beach section\n        if (site && (!circle || site.y < circle.y || (site.y === circle.y && site.x < circle.x))) {\n            // only if site is not a duplicate\n            if (site.x !== xsitex || site.y !== xsitey) {\n                // first create cell for new site\n                cells[siteid] = this.createCell(site);\n                site.voronoiId = siteid++;\n                // then create a beachsection for that site\n                this.addBeachsection(site);\n                // remember last site coords to detect duplicate\n                xsitey = site.y;\n                xsitex = site.x;\n                }\n            site = siteEvents.pop();\n            }\n\n        // remove beach section\n        else if (circle) {\n            this.removeBeachsection(circle.arc);\n            }\n\n        // all done, quit\n        else {\n            break;\n            }\n        }\n\n    // wrapping-up:\n    //   connect dangling edges to bounding box\n    //   cut edges as per bounding box\n    //   discard edges completely outside bounding box\n    //   discard edges which are point-like\n    this.clipEdges(bbox);\n\n    //   add missing edges in order to close opened cells\n    this.closeCells(bbox);\n\n    // to measure execution time\n    var stopTime = new Date();\n\n    // prepare return values\n    var diagram = new this.Diagram();\n    diagram.cells = this.cells;\n    diagram.edges = this.edges;\n    diagram.vertices = this.vertices;\n    diagram.execTime = stopTime.getTime()-startTime.getTime();\n\n    // clean up\n    this.reset();\n\n    return diagram;\n    };\n\nif(typeof module !== 'undefined') module.exports = Voronoi;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.370,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius / 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.370,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1 / 1.0936,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, options) {\n    if (options === void 0) { options = {}; }\n    switch (type) {\n        case \"Point\": return point(coordinates).geometry;\n        case \"LineString\": return lineString(coordinates).geometry;\n        case \"Polygon\": return polygon(coordinates).geometry;\n        case \"MultiPoint\": return multiPoint(coordinates).geometry;\n        case \"MultiLineString\": return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\": return multiPolygon(coordinates).geometry;\n        default: throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num) && !/^\\s*$/.test(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return (!!input) && (input.constructor === Object);\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n// Deprecated methods\nfunction radians2degrees() {\n    throw new Error(\"method has been renamed to `radiansToDegrees`\");\n}\nexports.radians2degrees = radians2degrees;\nfunction degrees2radians() {\n    throw new Error(\"method has been renamed to `degreesToRadians`\");\n}\nexports.degrees2radians = degrees2radians;\nfunction distanceToDegrees() {\n    throw new Error(\"method has been renamed to `lengthToDegrees`\");\n}\nexports.distanceToDegrees = distanceToDegrees;\nfunction distanceToRadians() {\n    throw new Error(\"method has been renamed to `lengthToRadians`\");\n}\nexports.distanceToRadians = distanceToRadians;\nfunction radiansToDistance() {\n    throw new Error(\"method has been renamed to `radiansToLength`\");\n}\nexports.radiansToDistance = radiansToDistance;\nfunction bearingToAngle() {\n    throw new Error(\"method has been renamed to `bearingToAzimuth`\");\n}\nexports.bearingToAngle = bearingToAngle;\nfunction convertDistance() {\n    throw new Error(\"method has been renamed to `convertLength`\");\n}\nexports.convertDistance = convertDistance;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n    // Handles null Geometry -- Skips this GeoJSON\n    if (geojson === null) return;\n    var j, k, l, geometry, stopG, coords,\n        geometryMaybeCollection,\n        wrapShrink = 0,\n        coordIndex = 0,\n        isGeometryCollection,\n        type = geojson.type,\n        isFeatureCollection = type === 'FeatureCollection',\n        isFeature = type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n            var multiFeatureIndex = 0;\n            var geometryIndex = 0;\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;\n\n            // Handles null Geometry -- Skips this geometry\n            if (geometry === null) continue;\n            coords = geometry.coordinates;\n            var geomType = geometry.type;\n\n            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;\n\n            switch (geomType) {\n            case null:\n                break;\n            case 'Point':\n                if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                coordIndex++;\n                multiFeatureIndex++;\n                break;\n            case 'LineString':\n            case 'MultiPoint':\n                for (j = 0; j < coords.length; j++) {\n                    if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                    coordIndex++;\n                    if (geomType === 'MultiPoint') multiFeatureIndex++;\n                }\n                if (geomType === 'LineString') multiFeatureIndex++;\n                break;\n            case 'Polygon':\n            case 'MultiLineString':\n                for (j = 0; j < coords.length; j++) {\n                    for (k = 0; k < coords[j].length - wrapShrink; k++) {\n                        if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                        coordIndex++;\n                    }\n                    if (geomType === 'MultiLineString') multiFeatureIndex++;\n                    if (geomType === 'Polygon') geometryIndex++;\n                }\n                if (geomType === 'Polygon') multiFeatureIndex++;\n                break;\n            case 'MultiPolygon':\n                for (j = 0; j < coords.length; j++) {\n                    geometryIndex = 0;\n                    for (k = 0; k < coords[j].length; k++) {\n                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                            if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                            coordIndex++;\n                        }\n                        geometryIndex++;\n                    }\n                    multiFeatureIndex++;\n                }\n                break;\n            case 'GeometryCollection':\n                for (j = 0; j < geometry.geometries.length; j++)\n                    if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;\n                break;\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n    var previousValue = initialValue;\n    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;\n        else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n    }, excludeWrapCoord);\n    return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n    var i;\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        for (i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i].properties, i) === false) break;\n        }\n        break;\n    case 'Feature':\n        callback(geojson.properties, 0);\n        break;\n    }\n}\n\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    propEach(geojson, function (currentProperties, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;\n        else previousValue = callback(previousValue, currentProperties, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n    if (geojson.type === 'Feature') {\n        callback(geojson, 0);\n    } else if (geojson.type === 'FeatureCollection') {\n        for (var i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i], i) === false) break;\n        }\n    }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    featureEach(geojson, function (currentFeature, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n    var coords = [];\n    coordEach(geojson, function (coord) {\n        coords.push(coord);\n    });\n    return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n    var i, j, g, geometry, stopG,\n        geometryMaybeCollection,\n        isGeometryCollection,\n        featureProperties,\n        featureBBox,\n        featureId,\n        featureIndex = 0,\n        isFeatureCollection = geojson.type === 'FeatureCollection',\n        isFeature = geojson.type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (i = 0; i < stop; i++) {\n\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        featureProperties = (isFeatureCollection ? geojson.features[i].properties :\n            (isFeature ? geojson.properties : {}));\n        featureBBox = (isFeatureCollection ? geojson.features[i].bbox :\n            (isFeature ? geojson.bbox : undefined));\n        featureId = (isFeatureCollection ? geojson.features[i].id :\n            (isFeature ? geojson.id : undefined));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (g = 0; g < stopG; g++) {\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n\n            // Handle null Geometry\n            if (geometry === null) {\n                if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                continue;\n            }\n            switch (geometry.type) {\n            case 'Point':\n            case 'LineString':\n            case 'MultiPoint':\n            case 'Polygon':\n            case 'MultiLineString':\n            case 'MultiPolygon': {\n                if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                break;\n            }\n            case 'GeometryCollection': {\n                for (j = 0; j < geometry.geometries.length; j++) {\n                    if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                }\n                break;\n            }\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n        // Only increase `featureIndex` per each feature\n        featureIndex++;\n    }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;\n        else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n    geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n        // Callback for single geometry\n        var type = (geometry === null) ? null : geometry.type;\n        switch (type) {\n        case null:\n        case 'Point':\n        case 'LineString':\n        case 'Polygon':\n            if (callback(helpers.feature(geometry, properties, {bbox: bbox, id: id}), featureIndex, 0) === false) return false;\n            return;\n        }\n\n        var geomType;\n\n        // Callback for multi-geometry\n        switch (type) {\n        case 'MultiPoint':\n            geomType = 'Point';\n            break;\n        case 'MultiLineString':\n            geomType = 'LineString';\n            break;\n        case 'MultiPolygon':\n            geomType = 'Polygon';\n            break;\n        }\n\n        for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {\n            var coordinate = geometry.coordinates[multiFeatureIndex];\n            var geom = {\n                type: geomType,\n                coordinates: coordinate\n            };\n            if (callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;\n        }\n    });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {\n        if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n        var segmentIndex = 0;\n\n        // Exclude null Geometries\n        if (!feature.geometry) return;\n        // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n        var type = feature.geometry.type;\n        if (type === 'Point' || type === 'MultiPoint') return;\n\n        // Generate 2-vertex line segments\n        var previousCoords;\n        var previousFeatureIndex = 0;\n        var previousMultiIndex = 0;\n        var prevGeomIndex = 0;\n        if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {\n            // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n            if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {\n                previousCoords = currentCoord;\n                previousFeatureIndex = featureIndex;\n                previousMultiIndex = multiPartIndexCoord;\n                prevGeomIndex = geometryIndex;\n                segmentIndex = 0;\n                return;\n            }\n            var currentSegment = helpers.lineString([previousCoords, currentCoord], feature.properties);\n            if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;\n            segmentIndex++;\n            previousCoords = currentCoord;\n        }) === false) return false;\n    });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentInex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    var started = false;\n    segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n        if (started === false && initialValue === undefined) previousValue = currentSegment;\n        else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);\n        started = true;\n    });\n    return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n    // validation\n    if (!geojson) throw new Error('geojson is required');\n\n    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n        if (feature.geometry === null) return;\n        var type = feature.geometry.type;\n        var coords = feature.geometry.coordinates;\n        switch (type) {\n        case 'LineString':\n            if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;\n            break;\n        case 'Polygon':\n            for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {\n                if (callback(helpers.lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n            }\n            break;\n        }\n    });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;\n        else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var segmentIndex = options.segmentIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find SegmentIndex\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n        if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n        return helpers.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var coordIndex = options.coordIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find Coord Index\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n        return helpers.point(coords, properties, options);\n    case 'MultiPoint':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        return helpers.point(coords[multiFeatureIndex], properties, options);\n    case 'LineString':\n        if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n        return helpers.point(coords[coordIndex], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;\n        return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;\n        return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n        return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.coordAll = coordAll;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.findSegment = findSegment;\nexports.findPoint = findPoint;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\nvar helpers_1 = require(\"@turf/helpers\");\n/**\n * Takes one or more features and calculates the centroid using the mean of all vertices.\n * This lessens the effect of small islands and artifacts when calculating the centroid of a set of polygons.\n *\n * @name centroid\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [options={}] Optional Parameters\n * @param {Object} [options.properties={}] an Object that is used as the {@link Feature}'s properties\n * @returns {Feature<Point>} the centroid of the input features\n * @example\n * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n *\n * var centroid = turf.centroid(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, centroid]\n */\nfunction centroid(geojson, options) {\n    if (options === void 0) { options = {}; }\n    var xSum = 0;\n    var ySum = 0;\n    var len = 0;\n    meta_1.coordEach(geojson, function (coord) {\n        xSum += coord[0];\n        ySum += coord[1];\n        len++;\n    });\n    return helpers_1.point([xSum / len, ySum / len], options.properties);\n}\nexports.default = centroid;\n","/**\n * Takes coordinates and properties (optional) and returns a new {@link Point} feature.\n *\n * @module turf/point\n * @category helper\n * @param {number} longitude position west to east in decimal degrees\n * @param {number} latitude position south to north in decimal degrees\n * @param {Object} properties an Object that is used as the {@link Feature}'s\n * properties\n * @return {Point} a Point feature\n * @example\n * var pt1 = turf.point([-75.343, 39.984]);\n *\n * //=pt1\n */\nvar isArray = Array.isArray || function(arg) {\n  return Object.prototype.toString.call(arg) === '[object Array]';\n};\nmodule.exports = function(coordinates, properties) {\n  if (!isArray(coordinates)) throw new Error('Coordinates must be an array');\n  if (coordinates.length < 2) throw new Error('Coordinates must be at least 2 numbers long');\n  return {\n    type: \"Feature\",\n    geometry: {\n      type: \"Point\",\n      coordinates: coordinates\n    },\n    properties: properties || {}\n  };\n};\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar helpers_1 = require(\"@turf/helpers\");\r\n/**\r\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\r\n *\r\n * @name getCoord\r\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\r\n * @returns {Array<number>} coordinates\r\n * @example\r\n * var pt = turf.point([10, 10]);\r\n *\r\n * var coord = turf.getCoord(pt);\r\n * //= [10, 10]\r\n */\r\nfunction getCoord(coord) {\r\n    if (!coord) {\r\n        throw new Error(\"coord is required\");\r\n    }\r\n    if (!Array.isArray(coord)) {\r\n        if (coord.type === \"Feature\" && coord.geometry !== null && coord.geometry.type === \"Point\") {\r\n            return coord.geometry.coordinates;\r\n        }\r\n        if (coord.type === \"Point\") {\r\n            return coord.coordinates;\r\n        }\r\n    }\r\n    if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {\r\n        return coord;\r\n    }\r\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\r\n}\r\nexports.getCoord = getCoord;\r\n/**\r\n * Unwrap coordinates from a Feature, Geometry Object or an Array\r\n *\r\n * @name getCoords\r\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\r\n * @returns {Array<any>} coordinates\r\n * @example\r\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\r\n *\r\n * var coords = turf.getCoords(poly);\r\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\r\n */\r\nfunction getCoords(coords) {\r\n    if (Array.isArray(coords)) {\r\n        return coords;\r\n    }\r\n    // Feature\r\n    if (coords.type === \"Feature\") {\r\n        if (coords.geometry !== null) {\r\n            return coords.geometry.coordinates;\r\n        }\r\n    }\r\n    else {\r\n        // Geometry\r\n        if (coords.coordinates) {\r\n            return coords.coordinates;\r\n        }\r\n    }\r\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\r\n}\r\nexports.getCoords = getCoords;\r\n/**\r\n * Checks if coordinates contains a number\r\n *\r\n * @name containsNumber\r\n * @param {Array<any>} coordinates GeoJSON Coordinates\r\n * @returns {boolean} true if Array contains a number\r\n */\r\nfunction containsNumber(coordinates) {\r\n    if (coordinates.length > 1 && helpers_1.isNumber(coordinates[0]) && helpers_1.isNumber(coordinates[1])) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\r\n        return containsNumber(coordinates[0]);\r\n    }\r\n    throw new Error(\"coordinates must only contain numbers\");\r\n}\r\nexports.containsNumber = containsNumber;\r\n/**\r\n * Enforce expectations about types of GeoJSON objects for Turf.\r\n *\r\n * @name geojsonType\r\n * @param {GeoJSON} value any GeoJSON object\r\n * @param {string} type expected GeoJSON type\r\n * @param {string} name name of calling function\r\n * @throws {Error} if value is not the expected type.\r\n */\r\nfunction geojsonType(value, type, name) {\r\n    if (!type || !name) {\r\n        throw new Error(\"type and name required\");\r\n    }\r\n    if (!value || value.type !== type) {\r\n        throw new Error(\"Invalid input to \" + name + \": must be a \" + type + \", given \" + value.type);\r\n    }\r\n}\r\nexports.geojsonType = geojsonType;\r\n/**\r\n * Enforce expectations about types of {@link Feature} inputs for Turf.\r\n * Internally this uses {@link geojsonType} to judge geometry types.\r\n *\r\n * @name featureOf\r\n * @param {Feature} feature a feature with an expected geometry type\r\n * @param {string} type expected GeoJSON type\r\n * @param {string} name name of calling function\r\n * @throws {Error} error if value is not the expected type.\r\n */\r\nfunction featureOf(feature, type, name) {\r\n    if (!feature) {\r\n        throw new Error(\"No feature passed\");\r\n    }\r\n    if (!name) {\r\n        throw new Error(\".featureOf() requires a name\");\r\n    }\r\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\r\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\r\n    }\r\n    if (!feature.geometry || feature.geometry.type !== type) {\r\n        throw new Error(\"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type);\r\n    }\r\n}\r\nexports.featureOf = featureOf;\r\n/**\r\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\r\n * Internally this uses {@link geojsonType} to judge geometry types.\r\n *\r\n * @name collectionOf\r\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\r\n * @param {string} type expected GeoJSON type\r\n * @param {string} name name of calling function\r\n * @throws {Error} if value is not the expected type.\r\n */\r\nfunction collectionOf(featureCollection, type, name) {\r\n    if (!featureCollection) {\r\n        throw new Error(\"No featureCollection passed\");\r\n    }\r\n    if (!name) {\r\n        throw new Error(\".collectionOf() requires a name\");\r\n    }\r\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\r\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\r\n    }\r\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\r\n        var feature = _a[_i];\r\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\r\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\r\n        }\r\n        if (!feature.geometry || feature.geometry.type !== type) {\r\n            throw new Error(\"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type);\r\n        }\r\n    }\r\n}\r\nexports.collectionOf = collectionOf;\r\n/**\r\n * Get Geometry from Feature or Geometry Object\r\n *\r\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\r\n * @returns {Geometry|null} GeoJSON Geometry Object\r\n * @throws {Error} if geojson is not a Feature or Geometry Object\r\n * @example\r\n * var point = {\r\n *   \"type\": \"Feature\",\r\n *   \"properties\": {},\r\n *   \"geometry\": {\r\n *     \"type\": \"Point\",\r\n *     \"coordinates\": [110, 40]\r\n *   }\r\n * }\r\n * var geom = turf.getGeom(point)\r\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\r\n */\r\nfunction getGeom(geojson) {\r\n    if (geojson.type === \"Feature\") {\r\n        return geojson.geometry;\r\n    }\r\n    return geojson;\r\n}\r\nexports.getGeom = getGeom;\r\n/**\r\n * Get GeoJSON object's type, Geometry type is prioritize.\r\n *\r\n * @param {GeoJSON} geojson GeoJSON object\r\n * @param {string} [name=\"geojson\"] name of the variable to display in error message\r\n * @returns {string} GeoJSON type\r\n * @example\r\n * var point = {\r\n *   \"type\": \"Feature\",\r\n *   \"properties\": {},\r\n *   \"geometry\": {\r\n *     \"type\": \"Point\",\r\n *     \"coordinates\": [110, 40]\r\n *   }\r\n * }\r\n * var geom = turf.getType(point)\r\n * //=\"Point\"\r\n */\r\nfunction getType(geojson, name) {\r\n    if (geojson.type === \"FeatureCollection\") {\r\n        return \"FeatureCollection\";\r\n    }\r\n    if (geojson.type === \"GeometryCollection\") {\r\n        return \"GeometryCollection\";\r\n    }\r\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\r\n        return geojson.geometry.type;\r\n    }\r\n    return geojson.type;\r\n}\r\nexports.getType = getType;\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"@turf/helpers\");\nvar invariant_1 = require(\"@turf/invariant\");\n// http://en.wikipedia.org/wiki/Haversine_formula\n// http://www.movable-type.co.uk/scripts/latlong.html\n/**\n * Takes two {@link Point|points} and finds the geographic bearing between them,\n * i.e. the angle measured in degrees from the north line (0 degrees)\n *\n * @name bearing\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.final=false] calculates the final bearing if true\n * @returns {number} bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)\n * @example\n * var point1 = turf.point([-75.343, 39.984]);\n * var point2 = turf.point([-75.534, 39.123]);\n *\n * var bearing = turf.bearing(point1, point2);\n *\n * //addToMap\n * var addToMap = [point1, point2]\n * point1.properties['marker-color'] = '#f00'\n * point2.properties['marker-color'] = '#0f0'\n * point1.properties.bearing = bearing\n */\nfunction bearing(start, end, options) {\n    if (options === void 0) { options = {}; }\n    // Reverse calculation\n    if (options.final === true) {\n        return calculateFinalBearing(start, end);\n    }\n    var coordinates1 = invariant_1.getCoord(start);\n    var coordinates2 = invariant_1.getCoord(end);\n    var lon1 = helpers_1.degreesToRadians(coordinates1[0]);\n    var lon2 = helpers_1.degreesToRadians(coordinates2[0]);\n    var lat1 = helpers_1.degreesToRadians(coordinates1[1]);\n    var lat2 = helpers_1.degreesToRadians(coordinates2[1]);\n    var a = Math.sin(lon2 - lon1) * Math.cos(lat2);\n    var b = Math.cos(lat1) * Math.sin(lat2) -\n        Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n    return helpers_1.radiansToDegrees(Math.atan2(a, b));\n}\n/**\n * Calculates Final Bearing\n *\n * @private\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @returns {number} bearing\n */\nfunction calculateFinalBearing(start, end) {\n    // Swap start & end\n    var bear = bearing(end, start);\n    bear = (bear + 180) % 360;\n    return bear;\n}\nexports.default = bearing;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar invariant_1 = require(\"@turf/invariant\");\nvar helpers_1 = require(\"@turf/helpers\");\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n/**\n * Calculates the distance between two {@link Point|points} in degrees, radians, miles, or kilometers.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name distance\n * @param {Coord} from origin point\n * @param {Coord} to destination point\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction distance(from, to, options) {\n    if (options === void 0) { options = {}; }\n    var coordinates1 = invariant_1.getCoord(from);\n    var coordinates2 = invariant_1.getCoord(to);\n    var dLat = helpers_1.degreesToRadians((coordinates2[1] - coordinates1[1]));\n    var dLon = helpers_1.degreesToRadians((coordinates2[0] - coordinates1[0]));\n    var lat1 = helpers_1.degreesToRadians(coordinates1[1]);\n    var lat2 = helpers_1.degreesToRadians(coordinates2[1]);\n    var a = Math.pow(Math.sin(dLat / 2), 2) +\n        Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n    return helpers_1.radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);\n}\nexports.default = distance;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// http://en.wikipedia.org/wiki/Haversine_formula\n// http://www.movable-type.co.uk/scripts/latlong.html\nvar helpers_1 = require(\"@turf/helpers\");\nvar invariant_1 = require(\"@turf/invariant\");\n/**\n * Takes a {@link Point} and calculates the location of a destination point given a distance in\n * degrees, radians, miles, or kilometers; and bearing in degrees.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name destination\n * @param {Coord} origin starting point\n * @param {number} distance distance from the origin point\n * @param {number} bearing ranging from -180 to 180\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @param {Object} [options.properties={}] Translate properties to Point\n * @returns {Feature<Point>} destination point\n * @example\n * var point = turf.point([-75.343, 39.984]);\n * var distance = 50;\n * var bearing = 90;\n * var options = {units: 'miles'};\n *\n * var destination = turf.destination(point, distance, bearing, options);\n *\n * //addToMap\n * var addToMap = [point, destination]\n * destination.properties['marker-color'] = '#f00';\n * point.properties['marker-color'] = '#0f0';\n */\nfunction destination(origin, distance, bearing, options) {\n    if (options === void 0) { options = {}; }\n    // Handle input\n    var coordinates1 = invariant_1.getCoord(origin);\n    var longitude1 = helpers_1.degreesToRadians(coordinates1[0]);\n    var latitude1 = helpers_1.degreesToRadians(coordinates1[1]);\n    var bearingRad = helpers_1.degreesToRadians(bearing);\n    var radians = helpers_1.lengthToRadians(distance, options.units);\n    // Main\n    var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) +\n        Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearingRad));\n    var longitude2 = longitude1 + Math.atan2(Math.sin(bearingRad) * Math.sin(radians) * Math.cos(latitude1), Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));\n    var lng = helpers_1.radiansToDegrees(longitude2);\n    var lat = helpers_1.radiansToDegrees(latitude2);\n    return helpers_1.point([lng, lat], options.properties);\n}\nexports.default = destination;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"@turf/helpers\");\nvar invariant_1 = require(\"@turf/invariant\");\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\nfunction lineSegment(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    var results = [];\n    meta_1.flattenEach(geojson, function (feature) {\n        lineSegmentFeature(feature, results);\n    });\n    return helpers_1.featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\nfunction lineSegmentFeature(geojson, results) {\n    var coords = [];\n    var geometry = geojson.geometry;\n    if (geometry !== null) {\n        switch (geometry.type) {\n            case \"Polygon\":\n                coords = invariant_1.getCoords(geometry);\n                break;\n            case \"LineString\":\n                coords = [invariant_1.getCoords(geometry)];\n        }\n        coords.forEach(function (coord) {\n            var segments = createSegments(coord, geojson.properties);\n            segments.forEach(function (segment) {\n                segment.id = results.length;\n                results.push(segment);\n            });\n        });\n    }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\nfunction createSegments(coords, properties) {\n    var segments = [];\n    coords.reduce(function (previousCoords, currentCoords) {\n        var segment = helpers_1.lineString([previousCoords, currentCoords], properties);\n        segment.bbox = bbox(previousCoords, currentCoords);\n        segments.push(segment);\n        return currentCoords;\n    });\n    return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\nfunction bbox(coords1, coords2) {\n    var x1 = coords1[0];\n    var y1 = coords1[1];\n    var x2 = coords2[0];\n    var y2 = coords2[1];\n    var west = (x1 < x2) ? x1 : x2;\n    var south = (y1 < y2) ? y1 : y2;\n    var east = (x1 > x2) ? x1 : x2;\n    var north = (y1 > y2) ? y1 : y2;\n    return [west, south, east, north];\n}\nexports.default = lineSegment;\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.quickselect = factory());\n}(this, (function () { 'use strict';\n\nfunction quickselect(arr, k, left, right, compare) {\n    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);\n}\n\nfunction quickselectStep(arr, k, left, right, compare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselectStep(arr, k, newLeft, newRight, compare);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nreturn quickselect;\n\n})));\n","'use strict';\n\nmodule.exports = rbush;\nmodule.exports.default = rbush;\n\nvar quickselect = require('quickselect');\n\nfunction rbush(maxEntries, format) {\n    if (!(this instanceof rbush)) return new rbush(maxEntries, format);\n\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\n    this._maxEntries = Math.max(4, maxEntries || 9);\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n\n    if (format) {\n        this._initFormat(format);\n    }\n\n    this.clear();\n}\n\nrbush.prototype = {\n\n    all: function () {\n        return this._all(this.data, []);\n    },\n\n    search: function (bbox) {\n\n        var node = this.data,\n            result = [],\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return result;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf) result.push(child);\n                    else if (contains(bbox, childBBox)) this._all(child, result);\n                    else nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return result;\n    },\n\n    collides: function (bbox) {\n\n        var node = this.data,\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return false;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf || contains(bbox, childBBox)) return true;\n                    nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return false;\n    },\n\n    load: function (data) {\n        if (!(data && data.length)) return this;\n\n        if (data.length < this._minEntries) {\n            for (var i = 0, len = data.length; i < len; i++) {\n                this.insert(data[i]);\n            }\n            return this;\n        }\n\n        // recursively build the tree with the given data from scratch using OMT algorithm\n        var node = this._build(data.slice(), 0, data.length - 1, 0);\n\n        if (!this.data.children.length) {\n            // save as is if tree is empty\n            this.data = node;\n\n        } else if (this.data.height === node.height) {\n            // split root if trees have the same height\n            this._splitRoot(this.data, node);\n\n        } else {\n            if (this.data.height < node.height) {\n                // swap trees if inserted one is bigger\n                var tmpNode = this.data;\n                this.data = node;\n                node = tmpNode;\n            }\n\n            // insert the small tree into the large tree at appropriate level\n            this._insert(node, this.data.height - node.height - 1, true);\n        }\n\n        return this;\n    },\n\n    insert: function (item) {\n        if (item) this._insert(item, this.data.height - 1);\n        return this;\n    },\n\n    clear: function () {\n        this.data = createNode([]);\n        return this;\n    },\n\n    remove: function (item, equalsFn) {\n        if (!item) return this;\n\n        var node = this.data,\n            bbox = this.toBBox(item),\n            path = [],\n            indexes = [],\n            i, parent, index, goingUp;\n\n        // depth-first iterative tree traversal\n        while (node || path.length) {\n\n            if (!node) { // go up\n                node = path.pop();\n                parent = path[path.length - 1];\n                i = indexes.pop();\n                goingUp = true;\n            }\n\n            if (node.leaf) { // check current node\n                index = findItem(item, node.children, equalsFn);\n\n                if (index !== -1) {\n                    // item found, remove the item and condense tree upwards\n                    node.children.splice(index, 1);\n                    path.push(node);\n                    this._condense(path);\n                    return this;\n                }\n            }\n\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\n                path.push(node);\n                indexes.push(i);\n                i = 0;\n                parent = node;\n                node = node.children[0];\n\n            } else if (parent) { // go right\n                i++;\n                node = parent.children[i];\n                goingUp = false;\n\n            } else node = null; // nothing found\n        }\n\n        return this;\n    },\n\n    toBBox: function (item) { return item; },\n\n    compareMinX: compareNodeMinX,\n    compareMinY: compareNodeMinY,\n\n    toJSON: function () { return this.data; },\n\n    fromJSON: function (data) {\n        this.data = data;\n        return this;\n    },\n\n    _all: function (node, result) {\n        var nodesToSearch = [];\n        while (node) {\n            if (node.leaf) result.push.apply(result, node.children);\n            else nodesToSearch.push.apply(nodesToSearch, node.children);\n\n            node = nodesToSearch.pop();\n        }\n        return result;\n    },\n\n    _build: function (items, left, right, height) {\n\n        var N = right - left + 1,\n            M = this._maxEntries,\n            node;\n\n        if (N <= M) {\n            // reached leaf level; return leaf\n            node = createNode(items.slice(left, right + 1));\n            calcBBox(node, this.toBBox);\n            return node;\n        }\n\n        if (!height) {\n            // target height of the bulk-loaded tree\n            height = Math.ceil(Math.log(N) / Math.log(M));\n\n            // target number of root entries to maximize storage utilization\n            M = Math.ceil(N / Math.pow(M, height - 1));\n        }\n\n        node = createNode([]);\n        node.leaf = false;\n        node.height = height;\n\n        // split the items into M mostly square tiles\n\n        var N2 = Math.ceil(N / M),\n            N1 = N2 * Math.ceil(Math.sqrt(M)),\n            i, j, right2, right3;\n\n        multiSelect(items, left, right, N1, this.compareMinX);\n\n        for (i = left; i <= right; i += N1) {\n\n            right2 = Math.min(i + N1 - 1, right);\n\n            multiSelect(items, i, right2, N2, this.compareMinY);\n\n            for (j = i; j <= right2; j += N2) {\n\n                right3 = Math.min(j + N2 - 1, right2);\n\n                // pack each entry recursively\n                node.children.push(this._build(items, j, right3, height - 1));\n            }\n        }\n\n        calcBBox(node, this.toBBox);\n\n        return node;\n    },\n\n    _chooseSubtree: function (bbox, node, level, path) {\n\n        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;\n\n        while (true) {\n            path.push(node);\n\n            if (node.leaf || path.length - 1 === level) break;\n\n            minArea = minEnlargement = Infinity;\n\n            for (i = 0, len = node.children.length; i < len; i++) {\n                child = node.children[i];\n                area = bboxArea(child);\n                enlargement = enlargedArea(bbox, child) - area;\n\n                // choose entry with the least area enlargement\n                if (enlargement < minEnlargement) {\n                    minEnlargement = enlargement;\n                    minArea = area < minArea ? area : minArea;\n                    targetNode = child;\n\n                } else if (enlargement === minEnlargement) {\n                    // otherwise choose one with the smallest area\n                    if (area < minArea) {\n                        minArea = area;\n                        targetNode = child;\n                    }\n                }\n            }\n\n            node = targetNode || node.children[0];\n        }\n\n        return node;\n    },\n\n    _insert: function (item, level, isNode) {\n\n        var toBBox = this.toBBox,\n            bbox = isNode ? item : toBBox(item),\n            insertPath = [];\n\n        // find the best node for accommodating the item, saving all nodes along the path too\n        var node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n        // put the item into the node\n        node.children.push(item);\n        extend(node, bbox);\n\n        // split on node overflow; propagate upwards if necessary\n        while (level >= 0) {\n            if (insertPath[level].children.length > this._maxEntries) {\n                this._split(insertPath, level);\n                level--;\n            } else break;\n        }\n\n        // adjust bboxes along the insertion path\n        this._adjustParentBBoxes(bbox, insertPath, level);\n    },\n\n    // split overflowed node into two\n    _split: function (insertPath, level) {\n\n        var node = insertPath[level],\n            M = node.children.length,\n            m = this._minEntries;\n\n        this._chooseSplitAxis(node, m, M);\n\n        var splitIndex = this._chooseSplitIndex(node, m, M);\n\n        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n        newNode.height = node.height;\n        newNode.leaf = node.leaf;\n\n        calcBBox(node, this.toBBox);\n        calcBBox(newNode, this.toBBox);\n\n        if (level) insertPath[level - 1].children.push(newNode);\n        else this._splitRoot(node, newNode);\n    },\n\n    _splitRoot: function (node, newNode) {\n        // split root node\n        this.data = createNode([node, newNode]);\n        this.data.height = node.height + 1;\n        this.data.leaf = false;\n        calcBBox(this.data, this.toBBox);\n    },\n\n    _chooseSplitIndex: function (node, m, M) {\n\n        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;\n\n        minOverlap = minArea = Infinity;\n\n        for (i = m; i <= M - m; i++) {\n            bbox1 = distBBox(node, 0, i, this.toBBox);\n            bbox2 = distBBox(node, i, M, this.toBBox);\n\n            overlap = intersectionArea(bbox1, bbox2);\n            area = bboxArea(bbox1) + bboxArea(bbox2);\n\n            // choose distribution with minimum overlap\n            if (overlap < minOverlap) {\n                minOverlap = overlap;\n                index = i;\n\n                minArea = area < minArea ? area : minArea;\n\n            } else if (overlap === minOverlap) {\n                // otherwise choose distribution with minimum area\n                if (area < minArea) {\n                    minArea = area;\n                    index = i;\n                }\n            }\n        }\n\n        return index;\n    },\n\n    // sorts node children by the best axis for split\n    _chooseSplitAxis: function (node, m, M) {\n\n        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,\n            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,\n            xMargin = this._allDistMargin(node, m, M, compareMinX),\n            yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n        // if total distributions margin value is minimal for x, sort by minX,\n        // otherwise it's already sorted by minY\n        if (xMargin < yMargin) node.children.sort(compareMinX);\n    },\n\n    // total margin of all possible split distributions where each node is at least m full\n    _allDistMargin: function (node, m, M, compare) {\n\n        node.children.sort(compare);\n\n        var toBBox = this.toBBox,\n            leftBBox = distBBox(node, 0, m, toBBox),\n            rightBBox = distBBox(node, M - m, M, toBBox),\n            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),\n            i, child;\n\n        for (i = m; i < M - m; i++) {\n            child = node.children[i];\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(leftBBox);\n        }\n\n        for (i = M - m - 1; i >= m; i--) {\n            child = node.children[i];\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(rightBBox);\n        }\n\n        return margin;\n    },\n\n    _adjustParentBBoxes: function (bbox, path, level) {\n        // adjust bboxes along the given tree path\n        for (var i = level; i >= 0; i--) {\n            extend(path[i], bbox);\n        }\n    },\n\n    _condense: function (path) {\n        // go through the path, removing empty nodes and updating bboxes\n        for (var i = path.length - 1, siblings; i >= 0; i--) {\n            if (path[i].children.length === 0) {\n                if (i > 0) {\n                    siblings = path[i - 1].children;\n                    siblings.splice(siblings.indexOf(path[i]), 1);\n\n                } else this.clear();\n\n            } else calcBBox(path[i], this.toBBox);\n        }\n    },\n\n    _initFormat: function (format) {\n        // data format (minX, minY, maxX, maxY accessors)\n\n        // uses eval-type function compilation instead of just accepting a toBBox function\n        // because the algorithms are very sensitive to sorting functions performance,\n        // so they should be dead simple and without inner calls\n\n        var compareArr = ['return a', ' - b', ';'];\n\n        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));\n        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));\n\n        this.toBBox = new Function('a',\n            'return {minX: a' + format[0] +\n            ', minY: a' + format[1] +\n            ', maxX: a' + format[2] +\n            ', maxY: a' + format[3] + '};');\n    }\n};\n\nfunction findItem(item, items, equalsFn) {\n    if (!equalsFn) return items.indexOf(item);\n\n    for (var i = 0; i < items.length; i++) {\n        if (equalsFn(item, items[i])) return i;\n    }\n    return -1;\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n    distBBox(node, 0, node.children.length, toBBox, node);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox, destNode) {\n    if (!destNode) destNode = createNode(null);\n    destNode.minX = Infinity;\n    destNode.minY = Infinity;\n    destNode.maxX = -Infinity;\n    destNode.maxY = -Infinity;\n\n    for (var i = k, child; i < p; i++) {\n        child = node.children[i];\n        extend(destNode, node.leaf ? toBBox(child) : child);\n    }\n\n    return destNode;\n}\n\nfunction extend(a, b) {\n    a.minX = Math.min(a.minX, b.minX);\n    a.minY = Math.min(a.minY, b.minY);\n    a.maxX = Math.max(a.maxX, b.maxX);\n    a.maxY = Math.max(a.maxY, b.maxY);\n    return a;\n}\n\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\n\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\n\nfunction enlargedArea(a, b) {\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\n\nfunction intersectionArea(a, b) {\n    var minX = Math.max(a.minX, b.minX),\n        minY = Math.max(a.minY, b.minY),\n        maxX = Math.min(a.maxX, b.maxX),\n        maxY = Math.min(a.maxY, b.maxY);\n\n    return Math.max(0, maxX - minX) *\n           Math.max(0, maxY - minY);\n}\n\nfunction contains(a, b) {\n    return a.minX <= b.minX &&\n           a.minY <= b.minY &&\n           b.maxX <= a.maxX &&\n           b.maxY <= a.maxY;\n}\n\nfunction intersects(a, b) {\n    return b.minX <= a.maxX &&\n           b.minY <= a.maxY &&\n           b.maxX >= a.minX &&\n           b.maxY >= a.minY;\n}\n\nfunction createNode(children) {\n    return {\n        children: children,\n        height: 1,\n        leaf: true,\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n    };\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n    var stack = [left, right],\n        mid;\n\n    while (stack.length) {\n        right = stack.pop();\n        left = stack.pop();\n\n        if (right - left <= n) continue;\n\n        mid = left + Math.ceil((right - left) / n / 2) * n;\n        quickselect(arr, mid, left, right, compare);\n\n        stack.push(left, mid, mid, right);\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n    var result = [Infinity, Infinity, -Infinity, -Infinity];\n    meta_1.coordEach(geojson, function (coord) {\n        if (result[0] > coord[0]) {\n            result[0] = coord[0];\n        }\n        if (result[1] > coord[1]) {\n            result[1] = coord[1];\n        }\n        if (result[2] < coord[0]) {\n            result[2] = coord[0];\n        }\n        if (result[3] < coord[1]) {\n            result[3] = coord[1];\n        }\n    });\n    return result;\n}\nexports.default = bbox;\n","var rbush = require('rbush');\nvar helpers = require('@turf/helpers');\nvar meta = require('@turf/meta');\nvar turfBBox = require('@turf/bbox').default;\nvar featureEach = meta.featureEach;\nvar coordEach = meta.coordEach;\nvar polygon = helpers.polygon;\nvar featureCollection = helpers.featureCollection;\n\n/**\n * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.\n *\n * @name rbush\n * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a\n * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.\n * @returns {RBush} GeoJSON RBush\n * @example\n * var geojsonRbush = require('geojson-rbush').default;\n * var tree = geojsonRbush();\n */\nfunction geojsonRbush(maxEntries) {\n    var tree = rbush(maxEntries);\n    /**\n     * [insert](https://github.com/mourner/rbush#data-format)\n     *\n     * @param {Feature} feature insert single GeoJSON Feature\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     * tree.insert(poly)\n     */\n    tree.insert = function (feature) {\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        return rbush.prototype.insert.call(this, feature);\n    };\n\n    /**\n     * [load](https://github.com/mourner/rbush#bulk-inserting-data)\n     *\n     * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var polys = turf.polygons([\n     *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],\n     *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]\n     * ]);\n     * tree.load(polys);\n     */\n    tree.load = function (features) {\n        var load = [];\n        // Load an Array of Features\n        if (Array.isArray(features)) {\n            features.forEach(function (feature) {\n                if (feature.type !== 'Feature') throw new Error('invalid features');\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n                load.push(feature);\n            });\n        } else {\n            // Load a FeatureCollection\n            featureEach(features, function (feature) {\n                if (feature.type !== 'Feature') throw new Error('invalid features');\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n                load.push(feature);\n            });\n        }\n        return rbush.prototype.load.call(this, load);\n    };\n\n    /**\n     * [remove](https://github.com/mourner/rbush#removing-data)\n     *\n     * @param {Feature} feature remove single GeoJSON Feature\n     * @param {Function} equals Pass a custom equals function to compare by value for removal.\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.remove(poly);\n     */\n    tree.remove = function (feature, equals) {\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        return rbush.prototype.remove.call(this, feature, equals);\n    };\n\n    /**\n     * [clear](https://github.com/mourner/rbush#removing-data)\n     *\n     * @returns {RBush} GeoJSON Rbush\n     * @example\n     * tree.clear()\n     */\n    tree.clear = function () {\n        return rbush.prototype.clear.call(this);\n    };\n\n    /**\n     * [search](https://github.com/mourner/rbush#search)\n     *\n     * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON\n     * @returns {FeatureCollection} all features that intersects with the given GeoJSON.\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.search(poly);\n     */\n    tree.search = function (geojson) {\n        var features = rbush.prototype.search.call(this, this.toBBox(geojson));\n        return featureCollection(features);\n    };\n\n    /**\n     * [collides](https://github.com/mourner/rbush#collisions)\n     *\n     * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON\n     * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.collides(poly);\n     */\n    tree.collides = function (geojson) {\n        return rbush.prototype.collides.call(this, this.toBBox(geojson));\n    };\n\n    /**\n     * [all](https://github.com/mourner/rbush#search)\n     *\n     * @returns {FeatureCollection} all the features in RBush\n     * @example\n     * tree.all()\n     */\n    tree.all = function () {\n        var features = rbush.prototype.all.call(this);\n        return featureCollection(features);\n    };\n\n    /**\n     * [toJSON](https://github.com/mourner/rbush#export-and-import)\n     *\n     * @returns {any} export data as JSON object\n     * @example\n     * var exported = tree.toJSON()\n     */\n    tree.toJSON = function () {\n        return rbush.prototype.toJSON.call(this);\n    };\n\n    /**\n     * [fromJSON](https://github.com/mourner/rbush#export-and-import)\n     *\n     * @param {any} json import previously exported data\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var exported = {\n     *   \"children\": [\n     *     {\n     *       \"type\": \"Feature\",\n     *       \"geometry\": {\n     *         \"type\": \"Point\",\n     *         \"coordinates\": [110, 50]\n     *       },\n     *       \"properties\": {},\n     *       \"bbox\": [110, 50, 110, 50]\n     *     }\n     *   ],\n     *   \"height\": 1,\n     *   \"leaf\": true,\n     *   \"minX\": 110,\n     *   \"minY\": 50,\n     *   \"maxX\": 110,\n     *   \"maxY\": 50\n     * }\n     * tree.fromJSON(exported)\n     */\n    tree.fromJSON = function (json) {\n        return rbush.prototype.fromJSON.call(this, json);\n    };\n\n    /**\n     * Converts GeoJSON to {minX, minY, maxX, maxY} schema\n     *\n     * @private\n     * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from\n     * @returns {Object} converted to {minX, minY, maxX, maxY}\n     */\n    tree.toBBox = function (geojson) {\n        var bbox;\n        if (geojson.bbox) bbox = geojson.bbox;\n        else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;\n        else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];\n        else if (geojson.type === 'Feature') bbox = turfBBox(geojson);\n        else if (geojson.type === 'FeatureCollection') bbox = turfBBox(geojson);\n        else throw new Error('invalid geojson')\n\n        return {\n            minX: bbox[0],\n            minY: bbox[1],\n            maxX: bbox[2],\n            maxY: bbox[3]\n        };\n    };\n    return tree;\n}\n\nmodule.exports = geojsonRbush;\nmodule.exports.default = geojsonRbush;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"@turf/helpers\");\nvar invariant_1 = require(\"@turf/invariant\");\nvar line_segment_1 = __importDefault(require(\"@turf/line-segment\"));\nvar meta_1 = require(\"@turf/meta\");\nvar geojson_rbush_1 = __importDefault(require(\"geojson-rbush\"));\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\nfunction lineIntersect(line1, line2) {\n    var unique = {};\n    var results = [];\n    // First, normalize geometries to features\n    // Then, handle simple 2-vertex segments\n    if (line1.type === \"LineString\") {\n        line1 = helpers_1.feature(line1);\n    }\n    if (line2.type === \"LineString\") {\n        line2 = helpers_1.feature(line2);\n    }\n    if (line1.type === \"Feature\" &&\n        line2.type === \"Feature\" &&\n        line1.geometry !== null &&\n        line2.geometry !== null &&\n        line1.geometry.type === \"LineString\" &&\n        line2.geometry.type === \"LineString\" &&\n        line1.geometry.coordinates.length === 2 &&\n        line2.geometry.coordinates.length === 2) {\n        var intersect = intersects(line1, line2);\n        if (intersect) {\n            results.push(intersect);\n        }\n        return helpers_1.featureCollection(results);\n    }\n    // Handles complex GeoJSON Geometries\n    var tree = geojson_rbush_1.default();\n    tree.load(line_segment_1.default(line2));\n    meta_1.featureEach(line_segment_1.default(line1), function (segment) {\n        meta_1.featureEach(tree.search(segment), function (match) {\n            var intersect = intersects(segment, match);\n            if (intersect) {\n                // prevent duplicate points https://github.com/Turfjs/turf/issues/688\n                var key = invariant_1.getCoords(intersect).join(\",\");\n                if (!unique[key]) {\n                    unique[key] = true;\n                    results.push(intersect);\n                }\n            }\n        });\n    });\n    return helpers_1.featureCollection(results);\n}\n/**\n * Find a point that intersects LineStrings with two coordinates each\n *\n * @private\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\n * @returns {Feature<Point>} intersecting GeoJSON Point\n */\nfunction intersects(line1, line2) {\n    var coords1 = invariant_1.getCoords(line1);\n    var coords2 = invariant_1.getCoords(line2);\n    if (coords1.length !== 2) {\n        throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\n    }\n    if (coords2.length !== 2) {\n        throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\n    }\n    var x1 = coords1[0][0];\n    var y1 = coords1[0][1];\n    var x2 = coords1[1][0];\n    var y2 = coords1[1][1];\n    var x3 = coords2[0][0];\n    var y3 = coords2[0][1];\n    var x4 = coords2[1][0];\n    var y4 = coords2[1][1];\n    var denom = ((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1));\n    var numeA = ((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3));\n    var numeB = ((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3));\n    if (denom === 0) {\n        if (numeA === 0 && numeB === 0) {\n            return null;\n        }\n        return null;\n    }\n    var uA = numeA / denom;\n    var uB = numeB / denom;\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n        var x = x1 + (uA * (x2 - x1));\n        var y = y1 + (uA * (y2 - y1));\n        return helpers_1.point([x, y]);\n    }\n    return null;\n}\nexports.default = lineIntersect;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bearing_1 = require(\"@turf/bearing\");\nvar distance_1 = require(\"@turf/distance\");\nvar destination_1 = require(\"@turf/destination\");\nvar line_intersect_1 = require(\"@turf/line-intersect\");\nvar meta_1 = require(\"@turf/meta\");\nvar helpers_1 = require(\"@turf/helpers\");\nvar invariant_1 = require(\"@turf/invariant\");\n/**\n * Takes a {@link Point} and a {@link LineString} and calculates the closest Point on the (Multi)LineString.\n *\n * @name nearestPointOnLine\n * @param {Geometry|Feature<LineString|MultiLineString>} lines lines to snap to\n * @param {Geometry|Feature<Point>|number[]} pt point to snap from\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {Feature<Point>} closest point on the `line` to `point`. The properties object will contain three values: `index`: closest point was found on nth line part, `dist`: distance between pt and the closest point, `location`: distance along the line between start and the closest point.\n * @example\n * var line = turf.lineString([\n *     [-77.031669, 38.878605],\n *     [-77.029609, 38.881946],\n *     [-77.020339, 38.884084],\n *     [-77.025661, 38.885821],\n *     [-77.021884, 38.889563],\n *     [-77.019824, 38.892368]\n * ]);\n * var pt = turf.point([-77.037076, 38.884017]);\n *\n * var snapped = turf.nearestPointOnLine(line, pt, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line, pt, snapped];\n * snapped.properties['marker-color'] = '#00f';\n */\nfunction nearestPointOnLine(lines, pt, options) {\n    if (options === void 0) { options = {}; }\n    var closestPt = helpers_1.point([Infinity, Infinity], {\n        dist: Infinity\n    });\n    var length = 0.0;\n    meta_1.flattenEach(lines, function (line) {\n        var coords = invariant_1.getCoords(line);\n        for (var i = 0; i < coords.length - 1; i++) {\n            //start\n            var start = helpers_1.point(coords[i]);\n            start.properties.dist = distance_1.default(pt, start, options);\n            //stop\n            var stop_1 = helpers_1.point(coords[i + 1]);\n            stop_1.properties.dist = distance_1.default(pt, stop_1, options);\n            // sectionLength\n            var sectionLength = distance_1.default(start, stop_1, options);\n            //perpendicular\n            var heightDistance = Math.max(start.properties.dist, stop_1.properties.dist);\n            var direction = bearing_1.default(start, stop_1);\n            var perpendicularPt1 = destination_1.default(pt, heightDistance, direction + 90, options);\n            var perpendicularPt2 = destination_1.default(pt, heightDistance, direction - 90, options);\n            var intersect = line_intersect_1.default(helpers_1.lineString([perpendicularPt1.geometry.coordinates, perpendicularPt2.geometry.coordinates]), helpers_1.lineString([start.geometry.coordinates, stop_1.geometry.coordinates]));\n            var intersectPt = null;\n            if (intersect.features.length > 0) {\n                intersectPt = intersect.features[0];\n                intersectPt.properties.dist = distance_1.default(pt, intersectPt, options);\n                intersectPt.properties.location = length + distance_1.default(start, intersectPt, options);\n            }\n            if (start.properties.dist < closestPt.properties.dist) {\n                closestPt = start;\n                closestPt.properties.index = i;\n                closestPt.properties.location = length;\n            }\n            if (stop_1.properties.dist < closestPt.properties.dist) {\n                closestPt = stop_1;\n                closestPt.properties.index = i + 1;\n                closestPt.properties.location = length + sectionLength;\n            }\n            if (intersectPt && intersectPt.properties.dist < closestPt.properties.dist) {\n                closestPt = intersectPt;\n                closestPt.properties.index = i;\n            }\n            // update length\n            length += sectionLength;\n        }\n    });\n    return closestPt;\n}\nexports.default = nearestPointOnLine;\n","/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n */\nvar earthRadius = 6371008.8;\n\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n */\nvar factors = {\n    meters: earthRadius,\n    metres: earthRadius,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    miles: earthRadius / 1609.344,\n    nauticalmiles: earthRadius / 1852,\n    inches: earthRadius * 39.370,\n    yards: earthRadius / 1.0936,\n    feet: earthRadius * 3.28084,\n    radians: 1,\n    degrees: earthRadius / 111325,\n};\n\n/**\n * Units of measurement factors based on 1 meter.\n */\nvar unitsFactors = {\n    meters: 1,\n    metres: 1,\n    millimeters: 1000,\n    millimetres: 1000,\n    centimeters: 100,\n    centimetres: 100,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    miles: 1 / 1609.344,\n    nauticalmiles: 1 / 1852,\n    inches: 39.370,\n    yards: 1 / 1.0936,\n    feet: 3.28084,\n    radians: 1 / earthRadius,\n    degrees: 1 / 111325,\n};\n\n/**\n * Area of measurement factors based on 1 square meter.\n */\nvar areaFactors = {\n    meters: 1,\n    metres: 1,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    centimeters: 10000,\n    centimetres: 10000,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    acres: 0.000247105,\n    miles: 3.86e-7,\n    yards: 1.195990046,\n    feet: 10.763910417,\n    inches: 1550.003100006\n};\n\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geometry, properties, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n    var id = options.id;\n\n    // Validation\n    if (geometry === undefined) throw new Error('geometry is required');\n    if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');\n    if (bbox) validateBBox(bbox);\n    if (id) validateId(id);\n\n    // Main\n    var feat = {type: 'Feature'};\n    if (id) feat.id = id;\n    if (bbox) feat.bbox = bbox;\n    feat.properties = properties || {};\n    feat.geometry = geometry;\n    return feat;\n}\n\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<number>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Geometry\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = 'Point';\n * var coordinates = [110, 50];\n *\n * var geometry = turf.geometry(type, coordinates);\n *\n * //=geometry\n */\nfunction geometry(type, coordinates, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n\n    // Validation\n    if (!type) throw new Error('type is required');\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n    if (bbox) validateBBox(bbox);\n\n    // Main\n    var geom;\n    switch (type) {\n    case 'Point': geom = point(coordinates).geometry; break;\n    case 'LineString': geom = lineString(coordinates).geometry; break;\n    case 'Polygon': geom = polygon(coordinates).geometry; break;\n    case 'MultiPoint': geom = multiPoint(coordinates).geometry; break;\n    case 'MultiLineString': geom = multiLineString(coordinates).geometry; break;\n    case 'MultiPolygon': geom = multiPolygon(coordinates).geometry; break;\n    default: throw new Error(type + ' is invalid');\n    }\n    if (bbox) geom.bbox = bbox;\n    return geom;\n}\n\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n    if (coordinates.length < 2) throw new Error('coordinates must be at least 2 numbers long');\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) throw new Error('coordinates must contain numbers');\n\n    return feature({\n        type: 'Point',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    for (var i = 0; i < coordinates.length; i++) {\n        var ring = coordinates[i];\n        if (ring.length < 4) {\n            throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (i === 0 && j === 0 && !isNumber(ring[0][0]) || !isNumber(ring[0][1])) throw new Error('coordinates must contain numbers');\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error('First and last Position are not equivalent.');\n            }\n        }\n    }\n\n    return feature({\n        type: 'Polygon',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (coordinates.length < 2) throw new Error('coordinates must be an array of two or more positions');\n    // Check if first point of LineString contains two numbers\n    if (!isNumber(coordinates[0][1]) || !isNumber(coordinates[0][1])) throw new Error('coordinates must contain numbers');\n\n    return feature({\n        type: 'LineString',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<number>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n    var id = options.id;\n\n    // Validation\n    if (!features) throw new Error('No features passed');\n    if (!Array.isArray(features)) throw new Error('features must be an Array');\n    if (bbox) validateBBox(bbox);\n    if (id) validateId(id);\n\n    // Main\n    var fc = {type: 'FeatureCollection'};\n    if (id) fc.id = id;\n    if (bbox) fc.bbox = bbox;\n    fc.features = features;\n    return fc;\n}\n\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiLineString',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiPoint',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiPolygon',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = {\n *     \"type\": \"Point\",\n *       \"coordinates\": [100, 0]\n *     };\n * var line = {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [ [101, 0], [102, 1] ]\n *   };\n * var collection = turf.geometryCollection([pt, line]);\n *\n * //=collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (!geometries) throw new Error('geometries is required');\n    if (!Array.isArray(geometries)) throw new Error('geometries must be an Array');\n\n    return feature({\n        type: 'GeometryCollection',\n        geometries: geometries\n    }, properties, options);\n}\n\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (num === undefined || num === null || isNaN(num)) throw new Error('num is required');\n    if (precision && !(precision >= 0)) throw new Error('precision must be a positive number');\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (radians === undefined || radians === null) throw new Error('radians is required');\n\n    if (units && typeof units !== 'string') throw new Error('units must be a string');\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error(units + ' units is invalid');\n    return radians * factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (distance === undefined || distance === null) throw new Error('distance is required');\n\n    if (units && typeof units !== 'string') throw new Error('units must be a string');\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error(units + ' units is invalid');\n    return distance / factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    if (bearing === null || bearing === undefined) throw new Error('bearing is required');\n\n    var angle = bearing % 360;\n    if (angle < 0) angle += 360;\n    return angle;\n}\n\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    if (radians === null || radians === undefined) throw new Error('radians is required');\n\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\n\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    if (degrees === null || degrees === undefined) throw new Error('degrees is required');\n\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\n\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {string} originalUnit of the length\n * @param {string} [finalUnit='kilometers'] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (length === null || length === undefined) throw new Error('length is required');\n    if (!(length >= 0)) throw new Error('length must be a positive number');\n\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit || 'kilometers');\n}\n\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {string} [originalUnit='meters'] of the distance\n * @param {string} [finalUnit='kilometers'] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (area === null || area === undefined) throw new Error('area is required');\n    if (!(area >= 0)) throw new Error('area must be a positive number');\n\n    var startFactor = areaFactors[originalUnit || 'meters'];\n    if (!startFactor) throw new Error('invalid original units');\n\n    var finalFactor = areaFactors[finalUnit || 'kilometers'];\n    if (!finalFactor) throw new Error('invalid final units');\n\n    return (area / startFactor) * finalFactor;\n}\n\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return (!!input) && (input.constructor === Object);\n}\n\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) throw new Error('bbox is required');\n    if (!Array.isArray(bbox)) throw new Error('bbox must be an Array');\n    if (bbox.length !== 4 && bbox.length !== 6) throw new Error('bbox must be an Array of 4 or 6 numbers');\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) throw new Error('bbox must only contain numbers');\n    });\n}\n\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) throw new Error('id is required');\n    if (['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');\n}\n\n// Deprecated methods\nfunction radians2degrees() {\n    throw new Error('method has been renamed to `radiansToDegrees`');\n}\n\nfunction degrees2radians() {\n    throw new Error('method has been renamed to `degreesToRadians`');\n}\n\nfunction distanceToDegrees() {\n    throw new Error('method has been renamed to `lengthToDegrees`');\n}\n\nfunction distanceToRadians() {\n    throw new Error('method has been renamed to `lengthToRadians`');\n}\n\nfunction radiansToDistance() {\n    throw new Error('method has been renamed to `radiansToLength`');\n}\n\nfunction bearingToAngle() {\n    throw new Error('method has been renamed to `bearingToAzimuth`');\n}\n\nfunction convertDistance() {\n    throw new Error('method has been renamed to `convertLength`');\n}\n\nexport { earthRadius, factors, unitsFactors, areaFactors, feature, geometry, point, points, polygon, polygons, lineString, lineStrings, featureCollection, multiLineString, multiPoint, multiPolygon, geometryCollection, round, radiansToLength, lengthToRadians, lengthToDegrees, bearingToAzimuth, radiansToDegrees, degreesToRadians, convertLength, convertArea, isNumber, isObject, validateBBox, validateId, radians2degrees, degrees2radians, distanceToDegrees, distanceToRadians, radiansToDistance, bearingToAngle, convertDistance };\n","import { isNumber } from '@turf/helpers';\n\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nfunction getCoord(coord) {\n    if (!coord) throw new Error('coord is required');\n    if (coord.type === 'Feature' && coord.geometry !== null && coord.geometry.type === 'Point') return coord.geometry.coordinates;\n    if (coord.type === 'Point') return coord.coordinates;\n    if (Array.isArray(coord) && coord.length >= 2 && coord[0].length === undefined && coord[1].length === undefined) return coord;\n\n    throw new Error('coord must be GeoJSON Point or an Array of numbers');\n}\n\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nfunction getCoords(coords) {\n    if (!coords) throw new Error('coords is required');\n\n    // Feature\n    if (coords.type === 'Feature' && coords.geometry !== null) return coords.geometry.coordinates;\n\n    // Geometry\n    if (coords.coordinates) return coords.coordinates;\n\n    // Array of numbers\n    if (Array.isArray(coords)) return coords;\n\n    throw new Error('coords must be GeoJSON Feature, Geometry Object or an Array');\n}\n\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nfunction containsNumber(coordinates) {\n    if (coordinates.length > 1 && isNumber(coordinates[0]) && isNumber(coordinates[1])) {\n        return true;\n    }\n\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error('coordinates must only contain numbers');\n}\n\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction geojsonType(value, type, name) {\n    if (!type || !name) throw new Error('type and name required');\n\n    if (!value || value.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + value.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nfunction featureOf(feature, type, name) {\n    if (!feature) throw new Error('No feature passed');\n    if (!name) throw new Error('.featureOf() requires a name');\n    if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n        throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction collectionOf(featureCollection, type, name) {\n    if (!featureCollection) throw new Error('No featureCollection passed');\n    if (!name) throw new Error('.collectionOf() requires a name');\n    if (!featureCollection || featureCollection.type !== 'FeatureCollection') {\n        throw new Error('Invalid input to ' + name + ', FeatureCollection required');\n    }\n    for (var i = 0; i < featureCollection.features.length; i++) {\n        var feature = featureCollection.features[i];\n        if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n            throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n        }\n    }\n}\n\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nfunction getGeom(geojson) {\n    if (!geojson) throw new Error('geojson is required');\n    if (geojson.geometry !== undefined) return geojson.geometry;\n    if (geojson.coordinates || geojson.geometries) return geojson;\n    throw new Error('geojson must be a valid Feature or Geometry Object');\n}\n\n/**\n * Get Geometry Type from Feature or Geometry Object\n *\n * @throws {Error} **DEPRECATED** in v5.0.0 in favor of getType\n */\nfunction getGeomType() {\n    throw new Error('invariant.getGeomType has been deprecated in v5.0 in favor of invariant.getType');\n}\n\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nfunction getType(geojson, name) {\n    if (!geojson) throw new Error((name || 'geojson') + ' is required');\n    // GeoJSON Feature & GeometryCollection\n    if (geojson.geometry && geojson.geometry.type) return geojson.geometry.type;\n    // GeoJSON Geometry & FeatureCollection\n    if (geojson.type) return geojson.type;\n    throw new Error((name || 'geojson') + ' is invalid');\n}\n\nexport { getCoord, getCoords, containsNumber, geojsonType, featureOf, collectionOf, getGeom, getGeomType, getType };\n","import { getCoord, getCoords } from '@turf/invariant';\n\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point resides inside the polygon. The polygon can\n * be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nfunction booleanPointInPolygon(point, polygon, options) {\n    // Optional parameters\n    options = options || {};\n    if (typeof options !== 'object') throw new Error('options is invalid');\n    var ignoreBoundary = options.ignoreBoundary;\n\n    // validation\n    if (!point) throw new Error('point is required');\n    if (!polygon) throw new Error('polygon is required');\n\n    var pt = getCoord(point);\n    var polys = getCoords(polygon);\n    var type = (polygon.geometry) ? polygon.geometry.type : polygon.type;\n    var bbox = polygon.bbox;\n\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) return false;\n\n    // normalize to multipolygon\n    if (type === 'Polygon') polys = [polys];\n\n    for (var i = 0, insidePoly = false; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) insidePoly = true;\n        }\n    }\n    return insidePoly;\n}\n\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] && ring[0][1] === ring[ring.length - 1][1]) ring = ring.slice(0, ring.length - 1);\n\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0], yi = ring[i][1];\n        var xj = ring[j][0], yj = ring[j][1];\n        var onBoundary = (pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0) &&\n            ((xi - pt[0]) * (xj - pt[0]) <= 0) && ((yi - pt[1]) * (yj - pt[1]) <= 0);\n        if (onBoundary) return !ignoreBoundary;\n        var intersect = ((yi > pt[1]) !== (yj > pt[1])) &&\n        (pt[0] < (xj - xi) * (pt[1] - yi) / (yj - yi) + xi);\n        if (intersect) isInside = !isInside;\n    }\n    return isInside;\n}\n\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return bbox[0] <= pt[0] &&\n           bbox[1] <= pt[1] &&\n           bbox[2] >= pt[0] &&\n           bbox[3] >= pt[1];\n}\n\nexport default booleanPointInPolygon;\n","/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n */\nvar earthRadius = 6371008.8;\n\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n */\nvar factors = {\n    meters: earthRadius,\n    metres: earthRadius,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    miles: earthRadius / 1609.344,\n    nauticalmiles: earthRadius / 1852,\n    inches: earthRadius * 39.370,\n    yards: earthRadius / 1.0936,\n    feet: earthRadius * 3.28084,\n    radians: 1,\n    degrees: earthRadius / 111325,\n};\n\n/**\n * Units of measurement factors based on 1 meter.\n */\nvar unitsFactors = {\n    meters: 1,\n    metres: 1,\n    millimeters: 1000,\n    millimetres: 1000,\n    centimeters: 100,\n    centimetres: 100,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    miles: 1 / 1609.344,\n    nauticalmiles: 1 / 1852,\n    inches: 39.370,\n    yards: 1 / 1.0936,\n    feet: 3.28084,\n    radians: 1 / earthRadius,\n    degrees: 1 / 111325,\n};\n\n/**\n * Area of measurement factors based on 1 square meter.\n */\nvar areaFactors = {\n    meters: 1,\n    metres: 1,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    centimeters: 10000,\n    centimetres: 10000,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    acres: 0.000247105,\n    miles: 3.86e-7,\n    yards: 1.195990046,\n    feet: 10.763910417,\n    inches: 1550.003100006\n};\n\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geometry, properties, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n    var id = options.id;\n\n    // Validation\n    if (geometry === undefined) throw new Error('geometry is required');\n    if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');\n    if (bbox) validateBBox(bbox);\n    if (id) validateId(id);\n\n    // Main\n    var feat = {type: 'Feature'};\n    if (id) feat.id = id;\n    if (bbox) feat.bbox = bbox;\n    feat.properties = properties || {};\n    feat.geometry = geometry;\n    return feat;\n}\n\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<number>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Geometry\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = 'Point';\n * var coordinates = [110, 50];\n *\n * var geometry = turf.geometry(type, coordinates);\n *\n * //=geometry\n */\nfunction geometry(type, coordinates, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n\n    // Validation\n    if (!type) throw new Error('type is required');\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n    if (bbox) validateBBox(bbox);\n\n    // Main\n    var geom;\n    switch (type) {\n    case 'Point': geom = point(coordinates).geometry; break;\n    case 'LineString': geom = lineString(coordinates).geometry; break;\n    case 'Polygon': geom = polygon(coordinates).geometry; break;\n    case 'MultiPoint': geom = multiPoint(coordinates).geometry; break;\n    case 'MultiLineString': geom = multiLineString(coordinates).geometry; break;\n    case 'MultiPolygon': geom = multiPolygon(coordinates).geometry; break;\n    default: throw new Error(type + ' is invalid');\n    }\n    if (bbox) geom.bbox = bbox;\n    return geom;\n}\n\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n    if (coordinates.length < 2) throw new Error('coordinates must be at least 2 numbers long');\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) throw new Error('coordinates must contain numbers');\n\n    return feature({\n        type: 'Point',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    for (var i = 0; i < coordinates.length; i++) {\n        var ring = coordinates[i];\n        if (ring.length < 4) {\n            throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (i === 0 && j === 0 && !isNumber(ring[0][0]) || !isNumber(ring[0][1])) throw new Error('coordinates must contain numbers');\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error('First and last Position are not equivalent.');\n            }\n        }\n    }\n\n    return feature({\n        type: 'Polygon',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (coordinates.length < 2) throw new Error('coordinates must be an array of two or more positions');\n    // Check if first point of LineString contains two numbers\n    if (!isNumber(coordinates[0][1]) || !isNumber(coordinates[0][1])) throw new Error('coordinates must contain numbers');\n\n    return feature({\n        type: 'LineString',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<number>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n    var id = options.id;\n\n    // Validation\n    if (!features) throw new Error('No features passed');\n    if (!Array.isArray(features)) throw new Error('features must be an Array');\n    if (bbox) validateBBox(bbox);\n    if (id) validateId(id);\n\n    // Main\n    var fc = {type: 'FeatureCollection'};\n    if (id) fc.id = id;\n    if (bbox) fc.bbox = bbox;\n    fc.features = features;\n    return fc;\n}\n\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiLineString',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiPoint',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiPolygon',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = {\n *     \"type\": \"Point\",\n *       \"coordinates\": [100, 0]\n *     };\n * var line = {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [ [101, 0], [102, 1] ]\n *   };\n * var collection = turf.geometryCollection([pt, line]);\n *\n * //=collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (!geometries) throw new Error('geometries is required');\n    if (!Array.isArray(geometries)) throw new Error('geometries must be an Array');\n\n    return feature({\n        type: 'GeometryCollection',\n        geometries: geometries\n    }, properties, options);\n}\n\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (num === undefined || num === null || isNaN(num)) throw new Error('num is required');\n    if (precision && !(precision >= 0)) throw new Error('precision must be a positive number');\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (radians === undefined || radians === null) throw new Error('radians is required');\n\n    if (units && typeof units !== 'string') throw new Error('units must be a string');\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error(units + ' units is invalid');\n    return radians * factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (distance === undefined || distance === null) throw new Error('distance is required');\n\n    if (units && typeof units !== 'string') throw new Error('units must be a string');\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error(units + ' units is invalid');\n    return distance / factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    if (bearing === null || bearing === undefined) throw new Error('bearing is required');\n\n    var angle = bearing % 360;\n    if (angle < 0) angle += 360;\n    return angle;\n}\n\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    if (radians === null || radians === undefined) throw new Error('radians is required');\n\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\n\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    if (degrees === null || degrees === undefined) throw new Error('degrees is required');\n\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\n\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {string} originalUnit of the length\n * @param {string} [finalUnit='kilometers'] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (length === null || length === undefined) throw new Error('length is required');\n    if (!(length >= 0)) throw new Error('length must be a positive number');\n\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit || 'kilometers');\n}\n\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {string} [originalUnit='meters'] of the distance\n * @param {string} [finalUnit='kilometers'] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (area === null || area === undefined) throw new Error('area is required');\n    if (!(area >= 0)) throw new Error('area must be a positive number');\n\n    var startFactor = areaFactors[originalUnit || 'meters'];\n    if (!startFactor) throw new Error('invalid original units');\n\n    var finalFactor = areaFactors[finalUnit || 'kilometers'];\n    if (!finalFactor) throw new Error('invalid final units');\n\n    return (area / startFactor) * finalFactor;\n}\n\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return (!!input) && (input.constructor === Object);\n}\n\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) throw new Error('bbox is required');\n    if (!Array.isArray(bbox)) throw new Error('bbox must be an Array');\n    if (bbox.length !== 4 && bbox.length !== 6) throw new Error('bbox must be an Array of 4 or 6 numbers');\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) throw new Error('bbox must only contain numbers');\n    });\n}\n\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) throw new Error('id is required');\n    if (['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');\n}\n\n// Deprecated methods\nfunction radians2degrees() {\n    throw new Error('method has been renamed to `radiansToDegrees`');\n}\n\nfunction degrees2radians() {\n    throw new Error('method has been renamed to `degreesToRadians`');\n}\n\nfunction distanceToDegrees() {\n    throw new Error('method has been renamed to `lengthToDegrees`');\n}\n\nfunction distanceToRadians() {\n    throw new Error('method has been renamed to `lengthToRadians`');\n}\n\nfunction radiansToDistance() {\n    throw new Error('method has been renamed to `radiansToLength`');\n}\n\nfunction bearingToAngle() {\n    throw new Error('method has been renamed to `bearingToAzimuth`');\n}\n\nfunction convertDistance() {\n    throw new Error('method has been renamed to `convertLength`');\n}\n\nexport { earthRadius, factors, unitsFactors, areaFactors, feature, geometry, point, points, polygon, polygons, lineString, lineStrings, featureCollection, multiLineString, multiPoint, multiPolygon, geometryCollection, round, radiansToLength, lengthToRadians, lengthToDegrees, bearingToAzimuth, radiansToDegrees, degreesToRadians, convertLength, convertArea, isNumber, isObject, validateBBox, validateId, radians2degrees, degrees2radians, distanceToDegrees, distanceToRadians, radiansToDistance, bearingToAngle, convertDistance };\n","import { feature, isObject, lineString, point } from '@turf/helpers';\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n    // Handles null Geometry -- Skips this GeoJSON\n    if (geojson === null) return;\n    var j, k, l, geometry, stopG, coords,\n        geometryMaybeCollection,\n        wrapShrink = 0,\n        coordIndex = 0,\n        isGeometryCollection,\n        type = geojson.type,\n        isFeatureCollection = type === 'FeatureCollection',\n        isFeature = type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n            var multiFeatureIndex = 0;\n            var geometryIndex = 0;\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;\n\n            // Handles null Geometry -- Skips this geometry\n            if (geometry === null) continue;\n            coords = geometry.coordinates;\n            var geomType = geometry.type;\n\n            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;\n\n            switch (geomType) {\n            case null:\n                break;\n            case 'Point':\n                if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                coordIndex++;\n                multiFeatureIndex++;\n                break;\n            case 'LineString':\n            case 'MultiPoint':\n                for (j = 0; j < coords.length; j++) {\n                    if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                    coordIndex++;\n                    if (geomType === 'MultiPoint') multiFeatureIndex++;\n                }\n                if (geomType === 'LineString') multiFeatureIndex++;\n                break;\n            case 'Polygon':\n            case 'MultiLineString':\n                for (j = 0; j < coords.length; j++) {\n                    for (k = 0; k < coords[j].length - wrapShrink; k++) {\n                        if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                        coordIndex++;\n                    }\n                    if (geomType === 'MultiLineString') multiFeatureIndex++;\n                    if (geomType === 'Polygon') geometryIndex++;\n                }\n                if (geomType === 'Polygon') multiFeatureIndex++;\n                break;\n            case 'MultiPolygon':\n                for (j = 0; j < coords.length; j++) {\n                    if (geomType === 'MultiPolygon') geometryIndex = 0;\n                    for (k = 0; k < coords[j].length; k++) {\n                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                            if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                            coordIndex++;\n                        }\n                        geometryIndex++;\n                    }\n                    multiFeatureIndex++;\n                }\n                break;\n            case 'GeometryCollection':\n                for (j = 0; j < geometry.geometries.length; j++)\n                    if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;\n                break;\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n    var previousValue = initialValue;\n    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;\n        else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n    }, excludeWrapCoord);\n    return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n    var i;\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        for (i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i].properties, i) === false) break;\n        }\n        break;\n    case 'Feature':\n        callback(geojson.properties, 0);\n        break;\n    }\n}\n\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    propEach(geojson, function (currentProperties, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;\n        else previousValue = callback(previousValue, currentProperties, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n    if (geojson.type === 'Feature') {\n        callback(geojson, 0);\n    } else if (geojson.type === 'FeatureCollection') {\n        for (var i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i], i) === false) break;\n        }\n    }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    featureEach(geojson, function (currentFeature, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n    var coords = [];\n    coordEach(geojson, function (coord) {\n        coords.push(coord);\n    });\n    return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n    var i, j, g, geometry, stopG,\n        geometryMaybeCollection,\n        isGeometryCollection,\n        featureProperties,\n        featureBBox,\n        featureId,\n        featureIndex = 0,\n        isFeatureCollection = geojson.type === 'FeatureCollection',\n        isFeature = geojson.type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (i = 0; i < stop; i++) {\n\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        featureProperties = (isFeatureCollection ? geojson.features[i].properties :\n            (isFeature ? geojson.properties : {}));\n        featureBBox = (isFeatureCollection ? geojson.features[i].bbox :\n            (isFeature ? geojson.bbox : undefined));\n        featureId = (isFeatureCollection ? geojson.features[i].id :\n            (isFeature ? geojson.id : undefined));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (g = 0; g < stopG; g++) {\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n\n            // Handle null Geometry\n            if (geometry === null) {\n                if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                continue;\n            }\n            switch (geometry.type) {\n            case 'Point':\n            case 'LineString':\n            case 'MultiPoint':\n            case 'Polygon':\n            case 'MultiLineString':\n            case 'MultiPolygon': {\n                if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                break;\n            }\n            case 'GeometryCollection': {\n                for (j = 0; j < geometry.geometries.length; j++) {\n                    if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                }\n                break;\n            }\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n        // Only increase `featureIndex` per each feature\n        featureIndex++;\n    }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;\n        else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n    geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n        // Callback for single geometry\n        var type = (geometry === null) ? null : geometry.type;\n        switch (type) {\n        case null:\n        case 'Point':\n        case 'LineString':\n        case 'Polygon':\n            if (callback(feature(geometry, properties, {bbox: bbox, id: id}), featureIndex, 0) === false) return false;\n            return;\n        }\n\n        var geomType;\n\n        // Callback for multi-geometry\n        switch (type) {\n        case 'MultiPoint':\n            geomType = 'Point';\n            break;\n        case 'MultiLineString':\n            geomType = 'LineString';\n            break;\n        case 'MultiPolygon':\n            geomType = 'Polygon';\n            break;\n        }\n\n        for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {\n            var coordinate = geometry.coordinates[multiFeatureIndex];\n            var geom = {\n                type: geomType,\n                coordinates: coordinate\n            };\n            if (callback(feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;\n        }\n    });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {\n        if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n    flattenEach(geojson, function (feature$$1, featureIndex, multiFeatureIndex) {\n        var segmentIndex = 0;\n\n        // Exclude null Geometries\n        if (!feature$$1.geometry) return;\n        // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n        var type = feature$$1.geometry.type;\n        if (type === 'Point' || type === 'MultiPoint') return;\n\n        // Generate 2-vertex line segments\n        var previousCoords;\n        if (coordEach(feature$$1, function (currentCoord, coordIndex, featureIndexCoord, mutliPartIndexCoord, geometryIndex) {\n            // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n            if (previousCoords === undefined) {\n                previousCoords = currentCoord;\n                return;\n            }\n            var currentSegment = lineString([previousCoords, currentCoord], feature$$1.properties);\n            if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;\n            segmentIndex++;\n            previousCoords = currentCoord;\n        }) === false) return false;\n    });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentInex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    var started = false;\n    segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n        if (started === false && initialValue === undefined) previousValue = currentSegment;\n        else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);\n        started = true;\n    });\n    return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n    // validation\n    if (!geojson) throw new Error('geojson is required');\n\n    flattenEach(geojson, function (feature$$1, featureIndex, multiFeatureIndex) {\n        if (feature$$1.geometry === null) return;\n        var type = feature$$1.geometry.type;\n        var coords = feature$$1.geometry.coordinates;\n        switch (type) {\n        case 'LineString':\n            if (callback(feature$$1, featureIndex, multiFeatureIndex, 0, 0) === false) return false;\n            break;\n        case 'Polygon':\n            for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {\n                if (callback(lineString(coords[geometryIndex], feature$$1.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n            }\n            break;\n        }\n    });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;\n        else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var segmentIndex = options.segmentIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find SegmentIndex\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n        if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n        return lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n        return lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n        return lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n        return lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var coordIndex = options.coordIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find Coord Index\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n        return point(coords, properties, options);\n    case 'MultiPoint':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        return point(coords[multiFeatureIndex], properties, options);\n    case 'LineString':\n        if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n        return point(coords[coordIndex], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;\n        return point(coords[geometryIndex][coordIndex], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;\n        return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n        return point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\nexport { coordEach, coordReduce, propEach, propReduce, featureEach, featureReduce, coordAll, geomEach, geomReduce, flattenEach, flattenReduce, segmentEach, segmentReduce, lineEach, lineReduce, findSegment, findPoint };\n","import pointInPolygon from '@turf/boolean-point-in-polygon';\nimport { featureCollection } from '@turf/helpers';\nimport { featureEach, geomEach } from '@turf/meta';\n\n/**\n * Finds {@link Points} that fall within {@link (Multi)Polygon(s)}.\n *\n * @name pointsWithinPolygon\n * @param {Feauture|FeatureCollection<Point>} points Points as input search\n * @param {FeatureCollection|Geoemtry|Feature<Polygon|MultiPolygon>} polygons Points must be within these (Multi)Polygon(s)\n * @returns {FeatureCollection<Point>} points that land within at least one polygon\n * @example\n * var points = turf.points([\n *     [-46.6318, -23.5523],\n *     [-46.6246, -23.5325],\n *     [-46.6062, -23.5513],\n *     [-46.663, -23.554],\n *     [-46.643, -23.557]\n * ]);\n *\n * var searchWithin = turf.polygon([[\n *     [-46.653,-23.543],\n *     [-46.634,-23.5346],\n *     [-46.613,-23.543],\n *     [-46.614,-23.559],\n *     [-46.631,-23.567],\n *     [-46.653,-23.560],\n *     [-46.653,-23.543]\n * ]]);\n *\n * var ptsWithin = turf.pointsWithinPolygon(points, searchWithin);\n *\n * //addToMap\n * var addToMap = [points, searchWithin, ptsWithin]\n * turf.featureEach(ptsWithin, function (currentFeature) {\n *   currentFeature.properties['marker-size'] = 'large';\n *   currentFeature.properties['marker-color'] = '#000';\n * });\n */\nfunction pointsWithinPolygon(points, polygons) {\n    var results = [];\n    geomEach(polygons, function (polygon) {\n        featureEach(points, function (point) {\n            if (pointInPolygon(point, polygon)) results.push(point);\n        });\n    });\n    return featureCollection(results);\n}\n\nexport default pointsWithinPolygon;\n","export class NoPointsInShapeError extends Error {\n    constructor(message, polygon, vertices) {\n        super(message);\n        this.polygon = polygon;\n        this.vertices = vertices;\n    }\n\n    toJSON() {\n        return {\n            message: this.message,\n            polygon: this.polygon,\n            vertices: this.vertices\n        };\n    }\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\n// Note: change RADIUS => earthRadius\nvar RADIUS = 6378137;\n/**\n * Takes one or more features and returns their area in square meters.\n *\n * @name area\n * @param {GeoJSON} geojson input GeoJSON feature(s)\n * @returns {number} area in square meters\n * @example\n * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n *\n * var area = turf.area(polygon);\n *\n * //addToMap\n * var addToMap = [polygon]\n * polygon.properties.area = area\n */\nfunction area(geojson) {\n    return meta_1.geomReduce(geojson, function (value, geom) {\n        return value + calculateArea(geom);\n    }, 0);\n}\nexports.default = area;\n/**\n * Calculate Area\n *\n * @private\n * @param {Geometry} geom GeoJSON Geometries\n * @returns {number} area\n */\nfunction calculateArea(geom) {\n    var total = 0;\n    var i;\n    switch (geom.type) {\n        case \"Polygon\":\n            return polygonArea(geom.coordinates);\n        case \"MultiPolygon\":\n            for (i = 0; i < geom.coordinates.length; i++) {\n                total += polygonArea(geom.coordinates[i]);\n            }\n            return total;\n        case \"Point\":\n        case \"MultiPoint\":\n        case \"LineString\":\n        case \"MultiLineString\":\n            return 0;\n    }\n    return 0;\n}\nfunction polygonArea(coords) {\n    var total = 0;\n    if (coords && coords.length > 0) {\n        total += Math.abs(ringArea(coords[0]));\n        for (var i = 1; i < coords.length; i++) {\n            total -= Math.abs(ringArea(coords[i]));\n        }\n    }\n    return total;\n}\n/**\n * @private\n * Calculate the approximate area of the polygon were it projected onto the earth.\n * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.\n *\n * Reference:\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for Polygons on a Sphere\",\n * JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007 http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409\n *\n * @param {Array<Array<number>>} coords Ring Coordinates\n * @returns {number} The approximate signed geodesic area of the polygon in square meters.\n */\nfunction ringArea(coords) {\n    var p1;\n    var p2;\n    var p3;\n    var lowerIndex;\n    var middleIndex;\n    var upperIndex;\n    var i;\n    var total = 0;\n    var coordsLength = coords.length;\n    if (coordsLength > 2) {\n        for (i = 0; i < coordsLength; i++) {\n            if (i === coordsLength - 2) {\n                lowerIndex = coordsLength - 2;\n                middleIndex = coordsLength - 1;\n                upperIndex = 0;\n            }\n            else if (i === coordsLength - 1) {\n                lowerIndex = coordsLength - 1;\n                middleIndex = 0;\n                upperIndex = 1;\n            }\n            else {\n                lowerIndex = i;\n                middleIndex = i + 1;\n                upperIndex = i + 2;\n            }\n            p1 = coords[lowerIndex];\n            p2 = coords[middleIndex];\n            p3 = coords[upperIndex];\n            total += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));\n        }\n        total = total * RADIUS * RADIUS / 2;\n    }\n    return total;\n}\nfunction rad(num) {\n    return num * Math.PI / 180;\n}\n","// ---------------------------------------------------------------------------------------------------------------------\n// GeoJSONUtils\n//\n// @module\n// ---------------------------------------------------------------------------------------------------------------------\n\nimport area from '@turf/area';\n\n// ---------------------------------------------------------------------------------------------------------------------\n\nclass GeoJSONUtils {\n    /**\n     * Checks to see if the feature is a Polygon formatted as a MultiPolygon.\n     *\n     * @param {Polygon} polygon\n     * @returns {Polygon}\n     */\n    fixMultiPoly(polygon) {\n        if(polygon.geometry.type === 'MultiPolygon' && polygon.geometry.coordinates[0].length === 1) {\n            // Handle a Polygon in the form of a MultiPolygon\n            polygon.geometry.type = 'Polygon';\n            polygon.geometry.coordinates = polygon.geometry.coordinates[0];\n\n            return polygon;\n        } else if(polygon.geometry.type === 'MultiPolygon' && polygon.geometry.coordinates[0].length > 1) {\n            // Handle a true MultiPolygon by returning the Polygon of largest area\n            const polygons = polygon.geometry.coordinates[0].map((coordinates) => {\n                return this._toGeoJSONFeature(\n                    this._toGeoJSONPolygon(coordinates)\n                );\n            });\n            const collectionArea = polygons.map(area);\n            const largestAreaIndex = collectionArea.indexOf(Math.max(...collectionArea));\n\n            return polygons[largestAreaIndex];\n        } else {\n            return polygon;\n        }\n    }\n\n    /**\n     * Takes a polygon and generates the sites needed to generate Voronoi\n     *\n     * @param {Polygon} polygon\n     * @param {integer} [numSegments=2] The number of equal segments we split each polygon line into.\n     *   The higher the value, the better the medial axis approximation. However, comput time will increase.\n     * @param {number} [decimalPlaces=1e-20] A power of 10 used to truncate the decimal places of the polygon sites and\n     *   bbox. This is a workaround due to the issue referred to here:\n     *   https://github.com/gorhill/Javascript-Voronoi/issues/15\n     *   Defaults to 1e-20.\n     * @returns {{sites: Array, bbox: {xl: number, xr: number, yt: number, yb: number}}}\n     */\n    sites(polygon, numSegments = 2, decimalPlaces = 1e-20) {\n        let polygonSites = [];\n        let xmin,xmax,ymin,ymax;\n        for(let i = 0; i < polygon.geometry.coordinates.length; i++) {\n            const polyRing = polygon.geometry.coordinates[i].slice();\n            for(let j = 0; j < polyRing.length-1; j++) {\n                //Push original point\n                polygonSites.push({\n                    x: Math.floor(polyRing[j][0] / decimalPlaces) * decimalPlaces,\n                    y: Math.floor(polyRing[j][1] / decimalPlaces) * decimalPlaces\n                });\n                //Push segments\n                for(let k = 1; k < numSegments; k++) {\n                    polygonSites.push({\n                        x: Math.floor((polyRing[j][0]+(polyRing[j+1][0]-polyRing[j][0]) * k / numSegments) / decimalPlaces) * decimalPlaces,\n                        y: Math.floor((polyRing[j][1]+(polyRing[j+1][1]-polyRing[j][1]) * k / numSegments) / decimalPlaces) * decimalPlaces\n                    });\n                }\n                //initialize bounding box\n                if((i === 0) && (j === 0)) {\n                    xmin = Math.floor(polyRing[j][0] / decimalPlaces) * decimalPlaces;\n                    xmax = xmin;\n                    ymin = Math.floor(polyRing[j][1] / decimalPlaces) * decimalPlaces;\n                    ymax = ymin;\n                } else {\n                    if(polyRing[j][0] < xmin) {\n                        xmin = Math.floor(polyRing[j][0] / decimalPlaces) * decimalPlaces;\n                    }\n                    if(polyRing[j][0] > xmax) {\n                        xmax = Math.floor(polyRing[j][0] / decimalPlaces) * decimalPlaces;\n                    }\n                    if(polyRing[j][1] < ymin) {\n                        ymin = Math.floor(polyRing[j][1] / decimalPlaces) * decimalPlaces;\n                    }\n                    if(polyRing[j][1] > ymax) {\n                        ymax = Math.floor(polyRing[j][1] / decimalPlaces) * decimalPlaces;\n                    }\n                }\n            }\n        }\n        return {\n            sites: polygonSites,\n            bbox: {\n                xl: xmin,\n                xr: xmax,\n                yt: ymin,\n                yb: ymax\n            }\n        };\n    }\n\n    /**\n     * @param {Geometry} geom\n     * @returns {{type: string, geometry: Geometry}}\n     * @private\n     */\n    _toGeoJSONFeature(geom) {\n        return {\n            \"type\": \"Feature\",\n            \"geometry\": geom\n        };\n    }\n\n    /**\n     * @param {number[]} coordinates\n     * @returns {{type: string, coordinates: number[]}}\n     * @private\n     */\n    _toGeoJSONPolygon(coordinates) {\n        const geom = {\n            \"type\": \"Polygon\",\n            \"coordinates\": [coordinates]\n        };\n        return(geom);\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport default new GeoJSONUtils();\n\n// ---------------------------------------------------------------------------------------------------------------------","import {assert} from 'chai';\nimport Voronoi from 'voronoi';\nconst voronoi = new Voronoi;\nimport centroid from '@turf/centroid';\nimport point from 'turf-point';\nimport nearestPointOnLine from '@turf/nearest-point-on-line';\nimport within from '@turf/points-within-polygon';\nimport { NoPointsInShapeError } from './errors';\nimport GeoJSONUtils from './utils/geojson-utils.js';\n\n/**\n * Takes a polygon feature and estimates the best position for label placement that is guaranteed to be inside the polygon. This uses voronoi to estimate the medial axis.\n *\n * @module turf/label-position\n * @param {Polygon} polygon - A GeoJSON Polygon feature of the underlying polygon geometry in EPSG:4326\n * @param {Object} [options]\n * @param {number} [options.decimalPlaces=1e-20] A power of 10 used to truncate the decimal places of the\n *   polygon sites and bbox. This is a workaround due to the issue referred to here:\n *   https://github.com/gorhill/Javascript-Voronoi/issues/15\n *   If left empty, will default to truncating at 20th decimal place.\n * @param {integer} [options.numSegments=2] The number of equal segments we split each polygon line into.\n *   The higher the value, the better the medial axis approximation. However, compute time will increase.\n * @param {string} [options.units=\"degrees\"] The units of the returned radius. Defaults to \"degrees\" as that's\n *   the units of the input coordinates, but may also be \"radians\", \"miles\", or \"kilometers\".\n * @returns {Point} A Point feature at the best estimated label position\n */\n\nfunction maxInscribedCircle(polygon, options) {\n    options = Object.assign(\n        {},\n        {\n            decimalPlaces: 1e-20,\n            numSegments: 2,\n            units: \"degrees\"\n        }, // Default\n        options // Overrides\n    );\n    const inputProperties = Object.assign({}, polygon.properties || {});\n    assert.isNumber(options.decimalPlaces);\n    assert.include(\n        [ 'degrees', 'kilometers', 'miles', 'radians' ],\n        options.units,\n        'Invalid value for \"options.units\". Value values are: \"degrees\", \"kilometers\", \"miles\", and \"radians\".'\n    );\n\n    const decimalPlaces = options.decimalPlaces;\n    const numSegments = options.numSegments;\n    const units = options.units;\n\n    polygon = GeoJSONUtils.fixMultiPoly(polygon);\n    const polySites = GeoJSONUtils.sites(polygon, numSegments, decimalPlaces);\n    const diagram = voronoi.compute(polySites.sites, polySites.bbox);\n    const vertices = {\n        type: \"FeatureCollection\",\n        features: []\n    };\n    //construct GeoJSON object of voronoi vertices\n    for(let i = 0; i < diagram.vertices.length; i++) {\n        vertices.features.push({\n            type: \"Feature\",\n            properties: {},\n            geometry: {\n                type: \"Point\",\n                coordinates: [diagram.vertices[i].x, diagram.vertices[i].y]\n            }\n        })\n    }\n    vertices.features.push(centroid(polygon));\n    //within requires a FeatureCollection for input polygons\n    const polygonFeatureCollection = {\n        type: \"FeatureCollection\",\n        features: [polygon]\n    };\n    const ptsWithin = within(vertices, polygonFeatureCollection); //remove any vertices that are not inside the polygon\n    if(ptsWithin.features.length === 0) {\n        throw new NoPointsInShapeError(\n            'Neither the centroid nor any Voronoi vertices intersect the shape.',\n            polygonFeatureCollection,\n            vertices\n        );\n    }\n    const labelLocation = {\n        coordinates: [0,0],\n        maxDist: 0\n    };\n    const polygonBoundaries = {\n        type: \"FeatureCollection\",\n        features: []\n    };\n    let vertexDistance;\n\n    //define borders of polygon and holes as LineStrings\n    for(let j = 0; j < polygon.geometry.coordinates.length; j++) {\n        polygonBoundaries.features.push({\n            type: \"Feature\",\n            properties: {},\n            geometry: {\n                type: \"LineString\",\n                coordinates: polygon.geometry.coordinates[j]\n            }\n        })\n    }\n\n    for(let k = 0; k < ptsWithin.features.length; k++) {\n        for(let l = 0; l < polygonBoundaries.features.length; l++) {\n            if(l === 0) {\n                vertexDistance = nearestPointOnLine(polygonBoundaries.features[l], ptsWithin.features[k], {units: units}).properties.dist;\n            } else {\n                vertexDistance = Math.min(vertexDistance,\n                    nearestPointOnLine(polygonBoundaries.features[l], ptsWithin.features[k], {units: units}).properties.dist);\n            }\n        }\n        if(vertexDistance > labelLocation.maxDist) {\n            labelLocation.coordinates = ptsWithin.features[k].geometry.coordinates;\n            labelLocation.maxDist = vertexDistance;\n        }\n    }\n\n    return point(\n        labelLocation.coordinates,\n        Object.assign(\n            inputProperties || {},\n            {radius: labelLocation.maxDist, units: units}\n        )\n    );\n};\n\nexport default maxInscribedCircle;"]}